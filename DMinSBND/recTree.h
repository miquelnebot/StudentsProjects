//////////////////////////////////////////////////////////
// This class has been automatically generated on
// Tue Mar 22 12:23:18 2022 by ROOT version 6.20/06
// from TTree recTree/recTree
// found on file: caf_0.root
//////////////////////////////////////////////////////////

#ifndef recTree_h
#define recTree_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>

// Header file for the classes stored in the TTree if any.

class recTree {
public :
   TTree          *fChain;   //!pointer to the analyzed TTree or TChain
   Int_t           fCurrent; //!current Tree number in a TChain

// Fixed size dimensions of array or collections stored in the TTree if any.
   static constexpr Int_t kMaxreco_trk = 11;
   static constexpr Int_t kMaxreco_shw = 16;
   static constexpr Int_t kMaxreco_stub = 23;
   static constexpr Int_t kMaxmc_nu = 1;
   static constexpr Int_t kMaxmc_prtl = 1;
   static constexpr Int_t kMaxslc = 4;
   static constexpr Int_t kMaxfake_reco = 1;
   static constexpr Int_t kMaxtrue_particles = 1130;
   static constexpr Int_t kMaxcrt_hits = 1;
   static constexpr Int_t kMaxcrt_tracks = 1;

   // Declaration of leaf types
 //caf::StandardRecord *rec;
   UInt_t          hdr_run;
   UInt_t          hdr_subrun;
   UInt_t          hdr_evt;
   UShort_t        hdr_subevt;
   Bool_t          hdr_ismc;
   UInt_t          hdr_fno;
   UInt_t          hdr_ngenevt;
   Float_t         hdr_pot;
   Int_t           hdr_mctype;
   Int_t           hdr_det;
   Bool_t          hdr_first_in_subrun;
   Bool_t          hdr_first_in_file;
   Int_t           reco_trk_;
   UInt_t          reco_trk_producer[kMaxreco_trk];   //[reco.trk_]
   UShort_t        reco_trk_npts[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_len[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_costh[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_phi[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dir_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dir_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dir_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dir_end_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dir_end_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dir_end_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_start_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_start_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_start_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_end_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_end_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_end_z[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_ID[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_chi2pid0_pdg[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_chi2pid0_pid_ndof[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid0_chi2_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid0_chi2_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid0_chi2_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid0_chi2_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid0_pida[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_chi2pid1_pdg[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_chi2pid1_pid_ndof[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid1_chi2_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid1_chi2_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid1_chi2_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid1_chi2_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid1_pida[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_chi2pid2_pdg[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_chi2pid2_pid_ndof[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid2_chi2_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid2_chi2_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid2_chi2_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid2_chi2_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_chi2pid2_pida[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_calo0_nhit[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_calo0_ke[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_calo0_charge[kMaxreco_trk];   //[reco.trk_]
 //vector<caf::SRCaloPoint> reco_trk_calo0_points[kMaxreco_trk];
   Int_t           reco_trk_calo1_nhit[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_calo1_ke[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_calo1_charge[kMaxreco_trk];   //[reco.trk_]
 //vector<caf::SRCaloPoint> reco_trk_calo1_points[kMaxreco_trk];
   Int_t           reco_trk_calo2_nhit[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_calo2_ke[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_calo2_charge[kMaxreco_trk];   //[reco.trk_]
 //vector<caf::SRCaloPoint> reco_trk_calo2_points[kMaxreco_trk];
   Int_t           reco_trk_bestplane[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_err_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_err_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_err_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_fwdP_err_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_err_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_err_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_err_kaon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_mcsP_bwdP_err_proton[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_mcsP_is_bwd_muon[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_mcsP_is_bwd_pion[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_mcsP_is_bwd_kaon[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_mcsP_is_bwd_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_rangeP_p_muon[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_rangeP_p_pion[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_rangeP_p_proton[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_total_deposited_energy[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_nmatches[kMaxreco_trk];   //[reco.trk_]
 //vector<caf::ParticleMatch> reco_trk_truth_matches[kMaxreco_trk];
   Int_t           reco_trk_truth_bestmatch_G4ID[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_bestmatch_energy[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_plane0VisE[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_plane1VisE[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_plane2VisE[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_genE[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_startE[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_endE[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_genT[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_startT[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_endT[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_length[kMaxreco_trk];   //[reco.trk_]
   UInt_t          reco_trk_truth_p_plane0nhit[kMaxreco_trk];   //[reco.trk_]
   UInt_t          reco_trk_truth_p_plane1nhit[kMaxreco_trk];   //[reco.trk_]
   UInt_t          reco_trk_truth_p_plane2nhit[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_genp_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_genp_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_genp_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_startp_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_startp_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_startp_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_endp_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_endp_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_endp_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_gen_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_gen_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_gen_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_start_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_start_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_start_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_end_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_end_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_truth_p_end_z[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_wallin[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_wallout[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_truth_p_cont_tpc[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_truth_p_crosses_tpc[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_truth_p_contained[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_pdg[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_G4ID[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_interaction_id[kMaxreco_trk];   //[reco.trk_]
   vector<unsigned int> reco_trk_truth_p_daughters[kMaxreco_trk];
   UInt_t          reco_trk_truth_p_parent[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_generator[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_start_process[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_end_process[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_truth_p_gstatus[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_position_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_position_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_position_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_position_err_x[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_position_err_y[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_position_err_z[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_time[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_hit_pe[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_crthit_hit_plane[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crthit_distance[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crttrack_time[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_crttrack_angle[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_pfp_id[kMaxreco_trk];   //[reco.trk_]
   UInt_t          reco_trk_pfp_ndaughters[kMaxreco_trk];   //[reco.trk_]
   vector<int>     reco_trk_pfp_daughters[kMaxreco_trk];
   Int_t           reco_trk_pfp_parent[kMaxreco_trk];   //[reco.trk_]
   Bool_t          reco_trk_pfp_parent_is_primary[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_pfp_trackScore[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_pfp_slcID[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_scatterClosestApproach_mean[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_scatterClosestApproach_stdDev[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_scatterClosestApproach_max[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_stoppingChi2Fit_pol0Chi2[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_stoppingChi2Fit_expChi2[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_stoppingChi2Fit_pol0Fit[kMaxreco_trk];   //[reco.trk_]
   Int_t           reco_trk_dazzle_pdg[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dazzle_muonScore[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dazzle_pionScore[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dazzle_protonScore[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dazzle_otherScore[kMaxreco_trk];   //[reco.trk_]
   Float_t         reco_trk_dazzle_bestScore[kMaxreco_trk];   //[reco.trk_]
   ULong_t         reco_ntrk;
   Int_t           reco_shw_;
   Int_t           reco_shw_bestplane[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_bestplane_dEdx[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_bestplane_energy[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_conversion_gap[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_density[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_len[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_open_angle[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_dEdx_plane0[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_dEdx_plane1[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_dEdx_plane2[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_energy_plane0[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_energy_plane1[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_energy_plane2[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_nHits_plane0[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_nHits_plane1[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_nHits_plane2[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_wirePitch_plane0[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_wirePitch_plane1[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_wirePitch_plane2[kMaxreco_shw];   //[reco.shw_]
   vector<float>   reco_shw_dEdx[kMaxreco_shw];
   vector<float>   reco_shw_energy[kMaxreco_shw];
   Float_t         reco_shw_dir_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_dir_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_dir_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_start_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_start_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_start_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_end_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_end_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_end_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_cosmicDist[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_pfp_id[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_pfp_ndaughters[kMaxreco_shw];   //[reco.shw_]
   vector<int>     reco_shw_pfp_daughters[kMaxreco_shw];
   Int_t           reco_shw_pfp_parent[kMaxreco_shw];   //[reco.shw_]
   Bool_t          reco_shw_pfp_parent_is_primary[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_pfp_trackScore[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_pfp_slcID[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_razzle_pdg[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_razzle_electronScore[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_razzle_photonScore[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_razzle_otherScore[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_razzle_bestScore[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_selVars_densityGradient[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_selVars_densityGradientPower[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_selVars_trackLength[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_selVars_trackWidth[kMaxreco_shw];   //[reco.shw_]
   vector<float>   reco_shw_selVars_showerResiduals[kMaxreco_shw];
   Float_t         reco_shw_truth_total_deposited_energy[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_nmatches[kMaxreco_shw];   //[reco.shw_]
 //vector<caf::ParticleMatch> reco_shw_truth_matches[kMaxreco_shw];
   Int_t           reco_shw_truth_bestmatch_G4ID[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_bestmatch_energy[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_plane0VisE[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_plane1VisE[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_plane2VisE[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_genE[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_startE[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_endE[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_genT[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_startT[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_endT[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_length[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_truth_p_plane0nhit[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_truth_p_plane1nhit[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_truth_p_plane2nhit[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_genp_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_genp_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_genp_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_startp_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_startp_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_startp_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_endp_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_endp_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_endp_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_gen_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_gen_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_gen_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_start_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_start_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_start_z[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_end_x[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_end_y[kMaxreco_shw];   //[reco.shw_]
   Float_t         reco_shw_truth_p_end_z[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_wallin[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_wallout[kMaxreco_shw];   //[reco.shw_]
   Bool_t          reco_shw_truth_p_cont_tpc[kMaxreco_shw];   //[reco.shw_]
   Bool_t          reco_shw_truth_p_crosses_tpc[kMaxreco_shw];   //[reco.shw_]
   Bool_t          reco_shw_truth_p_contained[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_pdg[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_G4ID[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_interaction_id[kMaxreco_shw];   //[reco.shw_]
   vector<unsigned int> reco_shw_truth_p_daughters[kMaxreco_shw];
   UInt_t          reco_shw_truth_p_parent[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_generator[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_start_process[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_end_process[kMaxreco_shw];   //[reco.shw_]
   Int_t           reco_shw_truth_p_gstatus[kMaxreco_shw];   //[reco.shw_]
   UInt_t          reco_shw_producer[kMaxreco_shw];   //[reco.shw_]
   ULong_t         reco_nshw;
   Int_t           reco_stub_;
   Float_t         reco_stub_vtx_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_vtx_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_vtx_z[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_end_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_end_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_end_z[kMaxreco_stub];   //[reco.stub_]
 //vector<caf::SRStubPlane> reco_stub_planes[kMaxreco_stub];
   Float_t         reco_stub_efield_vtx[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_efield_end[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_pfpid[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_total_deposited_energy[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_nmatches[kMaxreco_stub];   //[reco.stub_]
 //vector<caf::ParticleMatch> reco_stub_truth_matches[kMaxreco_stub];
   Int_t           reco_stub_truth_bestmatch_G4ID[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_bestmatch_energy[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_plane0VisE[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_plane1VisE[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_plane2VisE[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_genE[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_startE[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_endE[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_genT[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_startT[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_endT[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_length[kMaxreco_stub];   //[reco.stub_]
   UInt_t          reco_stub_truth_p_plane0nhit[kMaxreco_stub];   //[reco.stub_]
   UInt_t          reco_stub_truth_p_plane1nhit[kMaxreco_stub];   //[reco.stub_]
   UInt_t          reco_stub_truth_p_plane2nhit[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_genp_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_genp_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_genp_z[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_startp_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_startp_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_startp_z[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_endp_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_endp_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_endp_z[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_gen_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_gen_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_gen_z[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_start_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_start_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_start_z[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_end_x[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_end_y[kMaxreco_stub];   //[reco.stub_]
   Float_t         reco_stub_truth_p_end_z[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_wallin[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_wallout[kMaxreco_stub];   //[reco.stub_]
   Bool_t          reco_stub_truth_p_cont_tpc[kMaxreco_stub];   //[reco.stub_]
   Bool_t          reco_stub_truth_p_crosses_tpc[kMaxreco_stub];   //[reco.stub_]
   Bool_t          reco_stub_truth_p_contained[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_pdg[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_G4ID[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_interaction_id[kMaxreco_stub];   //[reco.stub_]
   vector<unsigned int> reco_stub_truth_p_daughters[kMaxreco_stub];
   UInt_t          reco_stub_truth_p_parent[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_generator[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_start_process[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_end_process[kMaxreco_stub];   //[reco.stub_]
   Int_t           reco_stub_truth_p_gstatus[kMaxreco_stub];   //[reco.stub_]
   ULong_t         reco_nstub;
   Int_t           mc_nu_;
   Int_t           mc_nu_initpdg[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_pdg[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_inttype[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_index[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_targetPDG[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_hitnuc[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_genie_intcode[kMaxmc_nu];   //[mc.nu_]
   Bool_t          mc_nu_isnc[kMaxmc_nu];   //[mc.nu_]
   Bool_t          mc_nu_iscc[kMaxmc_nu];   //[mc.nu_]
   Bool_t          mc_nu_isvtxcont[kMaxmc_nu];   //[mc.nu_]
   Bool_t          mc_nu_is_numucc_primary[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_E[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_plane0VisE[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_plane1VisE[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_plane2VisE[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_time[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_bjorkenX[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_inelasticityY[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_Q2[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_q0[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_modq[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_q0_lab[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_modq_lab[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_w[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_t[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_eccqe[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_baseline[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_npiplus[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_npiminus[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_npizero[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_nproton[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_nneutron[kMaxmc_nu];   //[mc.nu_]
   Bool_t          mc_nu_ischarm[kMaxmc_nu];   //[mc.nu_]
   Bool_t          mc_nu_isseaquark[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_resnum[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_xsec[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_genweight[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_plane0nhitprim[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_plane1nhitprim[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_plane2nhitprim[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_plane0nhit[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_plane1nhit[kMaxmc_nu];   //[mc.nu_]
   UInt_t          mc_nu_plane2nhit[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_parent_dcy_mode[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_parent_pdg[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_prod_vtx_x[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_prod_vtx_y[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_prod_vtx_z[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_parent_dcy_mom_x[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_parent_dcy_mom_y[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_parent_dcy_mom_z[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_parent_dcy_E[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_imp_weight[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_vtx_x[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_vtx_y[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_vtx_z[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_momentum_x[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_momentum_y[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_momentum_z[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_position_x[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_position_y[kMaxmc_nu];   //[mc.nu_]
   Float_t         mc_nu_position_z[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_det[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_mode[kMaxmc_nu];   //[mc.nu_]
   Int_t           mc_nu_generator[kMaxmc_nu];   //[mc.nu_]
   vector<unsigned int> mc_nu_genVersion[kMaxmc_nu];
   Int_t           mc_nu_nprim[kMaxmc_nu];   //[mc.nu_]
 //vector<caf::SRTrueParticle> mc_nu_prim[kMaxmc_nu];
 //vector<caf::SRMultiverse> mc_nu_wgt[kMaxmc_nu];
   ULong_t         mc_nnu;
   Int_t           mc_prtl_;
   Int_t           mc_prtl_gen[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_dcy_x[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_dcy_y[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_dcy_z[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_dcyT[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_mom_x[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_mom_y[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_mom_z[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_E[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_M[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_flux_weight[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_ray_weight[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_decay_weight[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_C1[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_C2[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_C3[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_C4[kMaxmc_prtl];   //[mc.prtl_]
   Float_t         mc_prtl_C5[kMaxmc_prtl];   //[mc.prtl_]
   ULong_t         mc_nprtl;
   Int_t           nslc;
   Int_t           slc_;
   UInt_t          slc_producer[kMaxslc];   //[slc_]
   Float_t         slc_charge[kMaxslc];   //[slc_]
   Float_t         slc_vertex_x[kMaxslc];   //[slc_]
   Float_t         slc_vertex_y[kMaxslc];   //[slc_]
   Float_t         slc_vertex_z[kMaxslc];   //[slc_]
   Int_t           slc_truth_initpdg[kMaxslc];   //[slc_]
   Int_t           slc_truth_pdg[kMaxslc];   //[slc_]
   Int_t           slc_truth_inttype[kMaxslc];   //[slc_]
   Int_t           slc_truth_index[kMaxslc];   //[slc_]
   Int_t           slc_truth_targetPDG[kMaxslc];   //[slc_]
   Int_t           slc_truth_hitnuc[kMaxslc];   //[slc_]
   Int_t           slc_truth_genie_intcode[kMaxslc];   //[slc_]
   Bool_t          slc_truth_isnc[kMaxslc];   //[slc_]
   Bool_t          slc_truth_iscc[kMaxslc];   //[slc_]
   Bool_t          slc_truth_isvtxcont[kMaxslc];   //[slc_]
   Bool_t          slc_truth_is_numucc_primary[kMaxslc];   //[slc_]
   Float_t         slc_truth_E[kMaxslc];   //[slc_]
   Float_t         slc_truth_plane0VisE[kMaxslc];   //[slc_]
   Float_t         slc_truth_plane1VisE[kMaxslc];   //[slc_]
   Float_t         slc_truth_plane2VisE[kMaxslc];   //[slc_]
   Float_t         slc_truth_time[kMaxslc];   //[slc_]
   Float_t         slc_truth_bjorkenX[kMaxslc];   //[slc_]
   Float_t         slc_truth_inelasticityY[kMaxslc];   //[slc_]
   Float_t         slc_truth_Q2[kMaxslc];   //[slc_]
   Float_t         slc_truth_q0[kMaxslc];   //[slc_]
   Float_t         slc_truth_modq[kMaxslc];   //[slc_]
   Float_t         slc_truth_q0_lab[kMaxslc];   //[slc_]
   Float_t         slc_truth_modq_lab[kMaxslc];   //[slc_]
   Float_t         slc_truth_w[kMaxslc];   //[slc_]
   Float_t         slc_truth_t[kMaxslc];   //[slc_]
   Float_t         slc_truth_eccqe[kMaxslc];   //[slc_]
   Float_t         slc_truth_baseline[kMaxslc];   //[slc_]
   UInt_t          slc_truth_npiplus[kMaxslc];   //[slc_]
   UInt_t          slc_truth_npiminus[kMaxslc];   //[slc_]
   UInt_t          slc_truth_npizero[kMaxslc];   //[slc_]
   UInt_t          slc_truth_nproton[kMaxslc];   //[slc_]
   UInt_t          slc_truth_nneutron[kMaxslc];   //[slc_]
   Bool_t          slc_truth_ischarm[kMaxslc];   //[slc_]
   Bool_t          slc_truth_isseaquark[kMaxslc];   //[slc_]
   Int_t           slc_truth_resnum[kMaxslc];   //[slc_]
   Float_t         slc_truth_xsec[kMaxslc];   //[slc_]
   Float_t         slc_truth_genweight[kMaxslc];   //[slc_]
   UInt_t          slc_truth_plane0nhitprim[kMaxslc];   //[slc_]
   UInt_t          slc_truth_plane1nhitprim[kMaxslc];   //[slc_]
   UInt_t          slc_truth_plane2nhitprim[kMaxslc];   //[slc_]
   UInt_t          slc_truth_plane0nhit[kMaxslc];   //[slc_]
   UInt_t          slc_truth_plane1nhit[kMaxslc];   //[slc_]
   UInt_t          slc_truth_plane2nhit[kMaxslc];   //[slc_]
   Int_t           slc_truth_parent_dcy_mode[kMaxslc];   //[slc_]
   Int_t           slc_truth_parent_pdg[kMaxslc];   //[slc_]
   Float_t         slc_truth_prod_vtx_x[kMaxslc];   //[slc_]
   Float_t         slc_truth_prod_vtx_y[kMaxslc];   //[slc_]
   Float_t         slc_truth_prod_vtx_z[kMaxslc];   //[slc_]
   Float_t         slc_truth_parent_dcy_mom_x[kMaxslc];   //[slc_]
   Float_t         slc_truth_parent_dcy_mom_y[kMaxslc];   //[slc_]
   Float_t         slc_truth_parent_dcy_mom_z[kMaxslc];   //[slc_]
   Float_t         slc_truth_parent_dcy_E[kMaxslc];   //[slc_]
   Float_t         slc_truth_imp_weight[kMaxslc];   //[slc_]
   Float_t         slc_truth_vtx_x[kMaxslc];   //[slc_]
   Float_t         slc_truth_vtx_y[kMaxslc];   //[slc_]
   Float_t         slc_truth_vtx_z[kMaxslc];   //[slc_]
   Float_t         slc_truth_momentum_x[kMaxslc];   //[slc_]
   Float_t         slc_truth_momentum_y[kMaxslc];   //[slc_]
   Float_t         slc_truth_momentum_z[kMaxslc];   //[slc_]
   Float_t         slc_truth_position_x[kMaxslc];   //[slc_]
   Float_t         slc_truth_position_y[kMaxslc];   //[slc_]
   Float_t         slc_truth_position_z[kMaxslc];   //[slc_]
   Int_t           slc_truth_det[kMaxslc];   //[slc_]
   Int_t           slc_truth_mode[kMaxslc];   //[slc_]
   Int_t           slc_truth_generator[kMaxslc];   //[slc_]
   vector<unsigned int> slc_truth_genVersion[kMaxslc];
   Int_t           slc_truth_nprim[kMaxslc];   //[slc_]
 //vector<caf::SRTrueParticle> slc_truth_prim[kMaxslc];
 //vector<caf::SRMultiverse> slc_truth_wgt[kMaxslc];
   Float_t         slc_tmatch_eff[kMaxslc];   //[slc_]
   Float_t         slc_tmatch_pur[kMaxslc];   //[slc_]
   Float_t         slc_tmatch_visEinslc[kMaxslc];   //[slc_]
   Float_t         slc_tmatch_visEcosmic[kMaxslc];   //[slc_]
   Int_t           slc_tmatch_index[kMaxslc];   //[slc_]
   Bool_t          slc_fmatch_present[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_time[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_chargeQ[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_chargeCenter_x[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_chargeCenter_y[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_chargeCenter_z[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_lightPE[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_lightCenter_x[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_lightCenter_y[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_lightCenter_z[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_score[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_scoreY[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_scoreZ[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_scoreRR[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_scoreRatio[kMaxslc];   //[slc_]
   Bool_t          slc_fmatch_a_present[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_time[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_chargeQ[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_chargeCenter_x[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_chargeCenter_y[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_chargeCenter_z[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_lightPE[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_lightCenter_x[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_lightCenter_y[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_lightCenter_z[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_score[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_scoreY[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_scoreZ[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_scoreRR[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_a_scoreRatio[kMaxslc];   //[slc_]
   Bool_t          slc_fmatch_b_present[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_time[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_chargeQ[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_chargeCenter_x[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_chargeCenter_y[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_chargeCenter_z[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_lightPE[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_lightCenter_x[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_lightCenter_y[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_lightCenter_z[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_score[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_scoreY[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_scoreZ[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_scoreRR[kMaxslc];   //[slc_]
   Float_t         slc_fmatch_b_scoreRatio[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_nuE[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_vtx_x[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_vtx_y[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_vtx_z[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_lepton_ke[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_lepton_costh[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_lepton_len[kMaxslc];   //[slc_]
   Int_t           slc_fake_reco_lepton_pid[kMaxslc];   //[slc_]
   Bool_t          slc_fake_reco_lepton_contained[kMaxslc];   //[slc_]
 //vector<caf::SRFakeRecoParticle> slc_fake_reco_hadrons[kMaxslc];
   Int_t           slc_fake_reco_nhad[kMaxslc];   //[slc_]
   Float_t         slc_fake_reco_wgt[kMaxslc];   //[slc_]
   Bool_t          slc_fake_reco_filled[kMaxslc];   //[slc_]
   Bool_t          slc_is_clear_cosmic[kMaxslc];   //[slc_]
   Int_t           slc_nu_pdg[kMaxslc];   //[slc_]
   Float_t         slc_nu_score[kMaxslc];   //[slc_]
   vector<unsigned long> slc_primary[kMaxslc];
   Int_t           slc_self[kMaxslc];   //[slc_]
 //vector<caf::SRTrack> slc_reco_trk[kMaxslc];
   ULong_t         slc_reco_ntrk[kMaxslc];   //[slc_]
 //vector<caf::SRShower> slc_reco_shw[kMaxslc];
   ULong_t         slc_reco_nshw[kMaxslc];   //[slc_]
 //vector<caf::SRStub> slc_reco_stub[kMaxslc];
   ULong_t         slc_reco_nstub[kMaxslc];   //[slc_]
   Int_t           nfake_reco;
   Int_t           fake_reco_;
   Float_t         fake_reco_nuE[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_vtx_x[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_vtx_y[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_vtx_z[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_lepton_ke[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_lepton_costh[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_lepton_len[kMaxfake_reco];   //[fake_reco_]
   Int_t           fake_reco_lepton_pid[kMaxfake_reco];   //[fake_reco_]
   Bool_t          fake_reco_lepton_contained[kMaxfake_reco];   //[fake_reco_]
 //vector<caf::SRFakeRecoParticle> fake_reco_hadrons[kMaxfake_reco];
   Int_t           fake_reco_nhad[kMaxfake_reco];   //[fake_reco_]
   Float_t         fake_reco_wgt[kMaxfake_reco];   //[fake_reco_]
   Bool_t          fake_reco_filled[kMaxfake_reco];   //[fake_reco_]
   Int_t           ntrue_particles;
   Int_t           true_particles_;
   Float_t         true_particles_plane0VisE[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_plane1VisE[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_plane2VisE[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_genE[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_startE[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_endE[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_genT[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_startT[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_endT[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_length[kMaxtrue_particles];   //[true_particles_]
   UInt_t          true_particles_plane0nhit[kMaxtrue_particles];   //[true_particles_]
   UInt_t          true_particles_plane1nhit[kMaxtrue_particles];   //[true_particles_]
   UInt_t          true_particles_plane2nhit[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_genp_x[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_genp_y[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_genp_z[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_startp_x[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_startp_y[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_startp_z[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_endp_x[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_endp_y[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_endp_z[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_gen_x[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_gen_y[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_gen_z[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_start_x[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_start_y[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_start_z[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_end_x[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_end_y[kMaxtrue_particles];   //[true_particles_]
   Float_t         true_particles_end_z[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_wallin[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_wallout[kMaxtrue_particles];   //[true_particles_]
   Bool_t          true_particles_cont_tpc[kMaxtrue_particles];   //[true_particles_]
   Bool_t          true_particles_crosses_tpc[kMaxtrue_particles];   //[true_particles_]
   Bool_t          true_particles_contained[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_pdg[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_G4ID[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_interaction_id[kMaxtrue_particles];   //[true_particles_]
   vector<unsigned int> true_particles_daughters[kMaxtrue_particles];
   UInt_t          true_particles_parent[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_generator[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_start_process[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_end_process[kMaxtrue_particles];   //[true_particles_]
   Int_t           true_particles_gstatus[kMaxtrue_particles];   //[true_particles_]
   Int_t           ncrt_hits;
   Int_t           crt_hits_;
   Float_t         crt_hits_position_x[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_position_y[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_position_z[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_position_err_x[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_position_err_y[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_position_err_z[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_time[kMaxcrt_hits];   //[crt_hits_]
   Float_t         crt_hits_pe[kMaxcrt_hits];   //[crt_hits_]
   Int_t           crt_hits_plane[kMaxcrt_hits];   //[crt_hits_]
   Int_t           ncrt_tracks;
   Int_t           crt_tracks_;
   Float_t         crt_tracks_hita_position_x[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_position_y[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_position_z[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_position_err_x[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_position_err_y[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_position_err_z[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_time[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hita_pe[kMaxcrt_tracks];   //[crt_tracks_]
   Int_t           crt_tracks_hita_plane[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_position_x[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_position_y[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_position_z[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_position_err_x[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_position_err_y[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_position_err_z[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_time[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_hitb_pe[kMaxcrt_tracks];   //[crt_tracks_]
   Int_t           crt_tracks_hitb_plane[kMaxcrt_tracks];   //[crt_tracks_]
   Float_t         crt_tracks_time[kMaxcrt_tracks];   //[crt_tracks_]
   Bool_t          pass_flashtrig;

   // List of branches
   TBranch        *b_rec_hdr_run;   //!
   TBranch        *b_rec_hdr_subrun;   //!
   TBranch        *b_rec_hdr_evt;   //!
   TBranch        *b_rec_hdr_subevt;   //!
   TBranch        *b_rec_hdr_ismc;   //!
   TBranch        *b_rec_hdr_fno;   //!
   TBranch        *b_rec_hdr_ngenevt;   //!
   TBranch        *b_rec_hdr_pot;   //!
   TBranch        *b_rec_hdr_mctype;   //!
   TBranch        *b_rec_hdr_det;   //!
   TBranch        *b_rec_hdr_first_in_subrun;   //!
   TBranch        *b_rec_hdr_first_in_file;   //!
   TBranch        *b_rec_reco_trk_;   //!
   TBranch        *b_reco_trk_producer;   //!
   TBranch        *b_reco_trk_npts;   //!
   TBranch        *b_reco_trk_len;   //!
   TBranch        *b_reco_trk_costh;   //!
   TBranch        *b_reco_trk_phi;   //!
   TBranch        *b_reco_trk_dir_x;   //!
   TBranch        *b_reco_trk_dir_y;   //!
   TBranch        *b_reco_trk_dir_z;   //!
   TBranch        *b_reco_trk_dir_end_x;   //!
   TBranch        *b_reco_trk_dir_end_y;   //!
   TBranch        *b_reco_trk_dir_end_z;   //!
   TBranch        *b_reco_trk_start_x;   //!
   TBranch        *b_reco_trk_start_y;   //!
   TBranch        *b_reco_trk_start_z;   //!
   TBranch        *b_reco_trk_end_x;   //!
   TBranch        *b_reco_trk_end_y;   //!
   TBranch        *b_reco_trk_end_z;   //!
   TBranch        *b_reco_trk_ID;   //!
   TBranch        *b_reco_trk_chi2pid0_pdg;   //!
   TBranch        *b_reco_trk_chi2pid0_pid_ndof;   //!
   TBranch        *b_reco_trk_chi2pid0_chi2_muon;   //!
   TBranch        *b_reco_trk_chi2pid0_chi2_pion;   //!
   TBranch        *b_reco_trk_chi2pid0_chi2_kaon;   //!
   TBranch        *b_reco_trk_chi2pid0_chi2_proton;   //!
   TBranch        *b_reco_trk_chi2pid0_pida;   //!
   TBranch        *b_reco_trk_chi2pid1_pdg;   //!
   TBranch        *b_reco_trk_chi2pid1_pid_ndof;   //!
   TBranch        *b_reco_trk_chi2pid1_chi2_muon;   //!
   TBranch        *b_reco_trk_chi2pid1_chi2_pion;   //!
   TBranch        *b_reco_trk_chi2pid1_chi2_kaon;   //!
   TBranch        *b_reco_trk_chi2pid1_chi2_proton;   //!
   TBranch        *b_reco_trk_chi2pid1_pida;   //!
   TBranch        *b_reco_trk_chi2pid2_pdg;   //!
   TBranch        *b_reco_trk_chi2pid2_pid_ndof;   //!
   TBranch        *b_reco_trk_chi2pid2_chi2_muon;   //!
   TBranch        *b_reco_trk_chi2pid2_chi2_pion;   //!
   TBranch        *b_reco_trk_chi2pid2_chi2_kaon;   //!
   TBranch        *b_reco_trk_chi2pid2_chi2_proton;   //!
   TBranch        *b_reco_trk_chi2pid2_pida;   //!
   TBranch        *b_reco_trk_calo0_nhit;   //!
   TBranch        *b_reco_trk_calo0_ke;   //!
   TBranch        *b_reco_trk_calo0_charge;   //!
   TBranch        *b_reco_trk_calo1_nhit;   //!
   TBranch        *b_reco_trk_calo1_ke;   //!
   TBranch        *b_reco_trk_calo1_charge;   //!
   TBranch        *b_reco_trk_calo2_nhit;   //!
   TBranch        *b_reco_trk_calo2_ke;   //!
   TBranch        *b_reco_trk_calo2_charge;   //!
   TBranch        *b_reco_trk_bestplane;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_muon;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_pion;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_kaon;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_proton;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_err_muon;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_err_pion;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_err_kaon;   //!
   TBranch        *b_reco_trk_mcsP_fwdP_err_proton;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_muon;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_pion;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_kaon;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_proton;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_err_muon;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_err_pion;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_err_kaon;   //!
   TBranch        *b_reco_trk_mcsP_bwdP_err_proton;   //!
   TBranch        *b_reco_trk_mcsP_is_bwd_muon;   //!
   TBranch        *b_reco_trk_mcsP_is_bwd_pion;   //!
   TBranch        *b_reco_trk_mcsP_is_bwd_kaon;   //!
   TBranch        *b_reco_trk_mcsP_is_bwd_proton;   //!
   TBranch        *b_reco_trk_rangeP_p_muon;   //!
   TBranch        *b_reco_trk_rangeP_p_pion;   //!
   TBranch        *b_reco_trk_rangeP_p_proton;   //!
   TBranch        *b_reco_trk_truth_total_deposited_energy;   //!
   TBranch        *b_reco_trk_truth_nmatches;   //!
   TBranch        *b_reco_trk_truth_bestmatch_G4ID;   //!
   TBranch        *b_reco_trk_truth_bestmatch_energy;   //!
   TBranch        *b_reco_trk_truth_p_plane0VisE;   //!
   TBranch        *b_reco_trk_truth_p_plane1VisE;   //!
   TBranch        *b_reco_trk_truth_p_plane2VisE;   //!
   TBranch        *b_reco_trk_truth_p_genE;   //!
   TBranch        *b_reco_trk_truth_p_startE;   //!
   TBranch        *b_reco_trk_truth_p_endE;   //!
   TBranch        *b_reco_trk_truth_p_genT;   //!
   TBranch        *b_reco_trk_truth_p_startT;   //!
   TBranch        *b_reco_trk_truth_p_endT;   //!
   TBranch        *b_reco_trk_truth_p_length;   //!
   TBranch        *b_reco_trk_truth_p_plane0nhit;   //!
   TBranch        *b_reco_trk_truth_p_plane1nhit;   //!
   TBranch        *b_reco_trk_truth_p_plane2nhit;   //!
   TBranch        *b_reco_trk_truth_p_genp_x;   //!
   TBranch        *b_reco_trk_truth_p_genp_y;   //!
   TBranch        *b_reco_trk_truth_p_genp_z;   //!
   TBranch        *b_reco_trk_truth_p_startp_x;   //!
   TBranch        *b_reco_trk_truth_p_startp_y;   //!
   TBranch        *b_reco_trk_truth_p_startp_z;   //!
   TBranch        *b_reco_trk_truth_p_endp_x;   //!
   TBranch        *b_reco_trk_truth_p_endp_y;   //!
   TBranch        *b_reco_trk_truth_p_endp_z;   //!
   TBranch        *b_reco_trk_truth_p_gen_x;   //!
   TBranch        *b_reco_trk_truth_p_gen_y;   //!
   TBranch        *b_reco_trk_truth_p_gen_z;   //!
   TBranch        *b_reco_trk_truth_p_start_x;   //!
   TBranch        *b_reco_trk_truth_p_start_y;   //!
   TBranch        *b_reco_trk_truth_p_start_z;   //!
   TBranch        *b_reco_trk_truth_p_end_x;   //!
   TBranch        *b_reco_trk_truth_p_end_y;   //!
   TBranch        *b_reco_trk_truth_p_end_z;   //!
   TBranch        *b_reco_trk_truth_p_wallin;   //!
   TBranch        *b_reco_trk_truth_p_wallout;   //!
   TBranch        *b_reco_trk_truth_p_cont_tpc;   //!
   TBranch        *b_reco_trk_truth_p_crosses_tpc;   //!
   TBranch        *b_reco_trk_truth_p_contained;   //!
   TBranch        *b_reco_trk_truth_p_pdg;   //!
   TBranch        *b_reco_trk_truth_p_G4ID;   //!
   TBranch        *b_reco_trk_truth_p_interaction_id;   //!
   TBranch        *b_reco_trk_truth_p_daughters;   //!
   TBranch        *b_reco_trk_truth_p_parent;   //!
   TBranch        *b_reco_trk_truth_p_generator;   //!
   TBranch        *b_reco_trk_truth_p_start_process;   //!
   TBranch        *b_reco_trk_truth_p_end_process;   //!
   TBranch        *b_reco_trk_truth_p_gstatus;   //!
   TBranch        *b_reco_trk_crthit_hit_position_x;   //!
   TBranch        *b_reco_trk_crthit_hit_position_y;   //!
   TBranch        *b_reco_trk_crthit_hit_position_z;   //!
   TBranch        *b_reco_trk_crthit_hit_position_err_x;   //!
   TBranch        *b_reco_trk_crthit_hit_position_err_y;   //!
   TBranch        *b_reco_trk_crthit_hit_position_err_z;   //!
   TBranch        *b_reco_trk_crthit_hit_time;   //!
   TBranch        *b_reco_trk_crthit_hit_pe;   //!
   TBranch        *b_reco_trk_crthit_hit_plane;   //!
   TBranch        *b_reco_trk_crthit_distance;   //!
   TBranch        *b_reco_trk_crttrack_time;   //!
   TBranch        *b_reco_trk_crttrack_angle;   //!
   TBranch        *b_reco_trk_pfp_id;   //!
   TBranch        *b_reco_trk_pfp_ndaughters;   //!
   TBranch        *b_reco_trk_pfp_daughters;   //!
   TBranch        *b_reco_trk_pfp_parent;   //!
   TBranch        *b_reco_trk_pfp_parent_is_primary;   //!
   TBranch        *b_reco_trk_pfp_trackScore;   //!
   TBranch        *b_reco_trk_pfp_slcID;   //!
   TBranch        *b_reco_trk_scatterClosestApproach_mean;   //!
   TBranch        *b_reco_trk_scatterClosestApproach_stdDev;   //!
   TBranch        *b_reco_trk_scatterClosestApproach_max;   //!
   TBranch        *b_reco_trk_stoppingChi2Fit_pol0Chi2;   //!
   TBranch        *b_reco_trk_stoppingChi2Fit_expChi2;   //!
   TBranch        *b_reco_trk_stoppingChi2Fit_pol0Fit;   //!
   TBranch        *b_reco_trk_dazzle_pdg;   //!
   TBranch        *b_reco_trk_dazzle_muonScore;   //!
   TBranch        *b_reco_trk_dazzle_pionScore;   //!
   TBranch        *b_reco_trk_dazzle_protonScore;   //!
   TBranch        *b_reco_trk_dazzle_otherScore;   //!
   TBranch        *b_reco_trk_dazzle_bestScore;   //!
   TBranch        *b_rec_reco_ntrk;   //!
   TBranch        *b_rec_reco_shw_;   //!
   TBranch        *b_reco_shw_bestplane;   //!
   TBranch        *b_reco_shw_bestplane_dEdx;   //!
   TBranch        *b_reco_shw_bestplane_energy;   //!
   TBranch        *b_reco_shw_conversion_gap;   //!
   TBranch        *b_reco_shw_density;   //!
   TBranch        *b_reco_shw_len;   //!
   TBranch        *b_reco_shw_open_angle;   //!
   TBranch        *b_reco_shw_dEdx_plane0;   //!
   TBranch        *b_reco_shw_dEdx_plane1;   //!
   TBranch        *b_reco_shw_dEdx_plane2;   //!
   TBranch        *b_reco_shw_energy_plane0;   //!
   TBranch        *b_reco_shw_energy_plane1;   //!
   TBranch        *b_reco_shw_energy_plane2;   //!
   TBranch        *b_reco_shw_nHits_plane0;   //!
   TBranch        *b_reco_shw_nHits_plane1;   //!
   TBranch        *b_reco_shw_nHits_plane2;   //!
   TBranch        *b_reco_shw_wirePitch_plane0;   //!
   TBranch        *b_reco_shw_wirePitch_plane1;   //!
   TBranch        *b_reco_shw_wirePitch_plane2;   //!
   TBranch        *b_reco_shw_dEdx;   //!
   TBranch        *b_reco_shw_energy;   //!
   TBranch        *b_reco_shw_dir_x;   //!
   TBranch        *b_reco_shw_dir_y;   //!
   TBranch        *b_reco_shw_dir_z;   //!
   TBranch        *b_reco_shw_start_x;   //!
   TBranch        *b_reco_shw_start_y;   //!
   TBranch        *b_reco_shw_start_z;   //!
   TBranch        *b_reco_shw_end_x;   //!
   TBranch        *b_reco_shw_end_y;   //!
   TBranch        *b_reco_shw_end_z;   //!
   TBranch        *b_reco_shw_cosmicDist;   //!
   TBranch        *b_reco_shw_pfp_id;   //!
   TBranch        *b_reco_shw_pfp_ndaughters;   //!
   TBranch        *b_reco_shw_pfp_daughters;   //!
   TBranch        *b_reco_shw_pfp_parent;   //!
   TBranch        *b_reco_shw_pfp_parent_is_primary;   //!
   TBranch        *b_reco_shw_pfp_trackScore;   //!
   TBranch        *b_reco_shw_pfp_slcID;   //!
   TBranch        *b_reco_shw_razzle_pdg;   //!
   TBranch        *b_reco_shw_razzle_electronScore;   //!
   TBranch        *b_reco_shw_razzle_photonScore;   //!
   TBranch        *b_reco_shw_razzle_otherScore;   //!
   TBranch        *b_reco_shw_razzle_bestScore;   //!
   TBranch        *b_reco_shw_selVars_densityGradient;   //!
   TBranch        *b_reco_shw_selVars_densityGradientPower;   //!
   TBranch        *b_reco_shw_selVars_trackLength;   //!
   TBranch        *b_reco_shw_selVars_trackWidth;   //!
   TBranch        *b_reco_shw_selVars_showerResiduals;   //!
   TBranch        *b_reco_shw_truth_total_deposited_energy;   //!
   TBranch        *b_reco_shw_truth_nmatches;   //!
   TBranch        *b_reco_shw_truth_bestmatch_G4ID;   //!
   TBranch        *b_reco_shw_truth_bestmatch_energy;   //!
   TBranch        *b_reco_shw_truth_p_plane0VisE;   //!
   TBranch        *b_reco_shw_truth_p_plane1VisE;   //!
   TBranch        *b_reco_shw_truth_p_plane2VisE;   //!
   TBranch        *b_reco_shw_truth_p_genE;   //!
   TBranch        *b_reco_shw_truth_p_startE;   //!
   TBranch        *b_reco_shw_truth_p_endE;   //!
   TBranch        *b_reco_shw_truth_p_genT;   //!
   TBranch        *b_reco_shw_truth_p_startT;   //!
   TBranch        *b_reco_shw_truth_p_endT;   //!
   TBranch        *b_reco_shw_truth_p_length;   //!
   TBranch        *b_reco_shw_truth_p_plane0nhit;   //!
   TBranch        *b_reco_shw_truth_p_plane1nhit;   //!
   TBranch        *b_reco_shw_truth_p_plane2nhit;   //!
   TBranch        *b_reco_shw_truth_p_genp_x;   //!
   TBranch        *b_reco_shw_truth_p_genp_y;   //!
   TBranch        *b_reco_shw_truth_p_genp_z;   //!
   TBranch        *b_reco_shw_truth_p_startp_x;   //!
   TBranch        *b_reco_shw_truth_p_startp_y;   //!
   TBranch        *b_reco_shw_truth_p_startp_z;   //!
   TBranch        *b_reco_shw_truth_p_endp_x;   //!
   TBranch        *b_reco_shw_truth_p_endp_y;   //!
   TBranch        *b_reco_shw_truth_p_endp_z;   //!
   TBranch        *b_reco_shw_truth_p_gen_x;   //!
   TBranch        *b_reco_shw_truth_p_gen_y;   //!
   TBranch        *b_reco_shw_truth_p_gen_z;   //!
   TBranch        *b_reco_shw_truth_p_start_x;   //!
   TBranch        *b_reco_shw_truth_p_start_y;   //!
   TBranch        *b_reco_shw_truth_p_start_z;   //!
   TBranch        *b_reco_shw_truth_p_end_x;   //!
   TBranch        *b_reco_shw_truth_p_end_y;   //!
   TBranch        *b_reco_shw_truth_p_end_z;   //!
   TBranch        *b_reco_shw_truth_p_wallin;   //!
   TBranch        *b_reco_shw_truth_p_wallout;   //!
   TBranch        *b_reco_shw_truth_p_cont_tpc;   //!
   TBranch        *b_reco_shw_truth_p_crosses_tpc;   //!
   TBranch        *b_reco_shw_truth_p_contained;   //!
   TBranch        *b_reco_shw_truth_p_pdg;   //!
   TBranch        *b_reco_shw_truth_p_G4ID;   //!
   TBranch        *b_reco_shw_truth_p_interaction_id;   //!
   TBranch        *b_reco_shw_truth_p_daughters;   //!
   TBranch        *b_reco_shw_truth_p_parent;   //!
   TBranch        *b_reco_shw_truth_p_generator;   //!
   TBranch        *b_reco_shw_truth_p_start_process;   //!
   TBranch        *b_reco_shw_truth_p_end_process;   //!
   TBranch        *b_reco_shw_truth_p_gstatus;   //!
   TBranch        *b_reco_shw_producer;   //!
   TBranch        *b_rec_reco_nshw;   //!
   TBranch        *b_rec_reco_stub_;   //!
   TBranch        *b_reco_stub_vtx_x;   //!
   TBranch        *b_reco_stub_vtx_y;   //!
   TBranch        *b_reco_stub_vtx_z;   //!
   TBranch        *b_reco_stub_end_x;   //!
   TBranch        *b_reco_stub_end_y;   //!
   TBranch        *b_reco_stub_end_z;   //!
   TBranch        *b_reco_stub_efield_vtx;   //!
   TBranch        *b_reco_stub_efield_end;   //!
   TBranch        *b_reco_stub_pfpid;   //!
   TBranch        *b_reco_stub_truth_total_deposited_energy;   //!
   TBranch        *b_reco_stub_truth_nmatches;   //!
   TBranch        *b_reco_stub_truth_bestmatch_G4ID;   //!
   TBranch        *b_reco_stub_truth_bestmatch_energy;   //!
   TBranch        *b_reco_stub_truth_p_plane0VisE;   //!
   TBranch        *b_reco_stub_truth_p_plane1VisE;   //!
   TBranch        *b_reco_stub_truth_p_plane2VisE;   //!
   TBranch        *b_reco_stub_truth_p_genE;   //!
   TBranch        *b_reco_stub_truth_p_startE;   //!
   TBranch        *b_reco_stub_truth_p_endE;   //!
   TBranch        *b_reco_stub_truth_p_genT;   //!
   TBranch        *b_reco_stub_truth_p_startT;   //!
   TBranch        *b_reco_stub_truth_p_endT;   //!
   TBranch        *b_reco_stub_truth_p_length;   //!
   TBranch        *b_reco_stub_truth_p_plane0nhit;   //!
   TBranch        *b_reco_stub_truth_p_plane1nhit;   //!
   TBranch        *b_reco_stub_truth_p_plane2nhit;   //!
   TBranch        *b_reco_stub_truth_p_genp_x;   //!
   TBranch        *b_reco_stub_truth_p_genp_y;   //!
   TBranch        *b_reco_stub_truth_p_genp_z;   //!
   TBranch        *b_reco_stub_truth_p_startp_x;   //!
   TBranch        *b_reco_stub_truth_p_startp_y;   //!
   TBranch        *b_reco_stub_truth_p_startp_z;   //!
   TBranch        *b_reco_stub_truth_p_endp_x;   //!
   TBranch        *b_reco_stub_truth_p_endp_y;   //!
   TBranch        *b_reco_stub_truth_p_endp_z;   //!
   TBranch        *b_reco_stub_truth_p_gen_x;   //!
   TBranch        *b_reco_stub_truth_p_gen_y;   //!
   TBranch        *b_reco_stub_truth_p_gen_z;   //!
   TBranch        *b_reco_stub_truth_p_start_x;   //!
   TBranch        *b_reco_stub_truth_p_start_y;   //!
   TBranch        *b_reco_stub_truth_p_start_z;   //!
   TBranch        *b_reco_stub_truth_p_end_x;   //!
   TBranch        *b_reco_stub_truth_p_end_y;   //!
   TBranch        *b_reco_stub_truth_p_end_z;   //!
   TBranch        *b_reco_stub_truth_p_wallin;   //!
   TBranch        *b_reco_stub_truth_p_wallout;   //!
   TBranch        *b_reco_stub_truth_p_cont_tpc;   //!
   TBranch        *b_reco_stub_truth_p_crosses_tpc;   //!
   TBranch        *b_reco_stub_truth_p_contained;   //!
   TBranch        *b_reco_stub_truth_p_pdg;   //!
   TBranch        *b_reco_stub_truth_p_G4ID;   //!
   TBranch        *b_reco_stub_truth_p_interaction_id;   //!
   TBranch        *b_reco_stub_truth_p_daughters;   //!
   TBranch        *b_reco_stub_truth_p_parent;   //!
   TBranch        *b_reco_stub_truth_p_generator;   //!
   TBranch        *b_reco_stub_truth_p_start_process;   //!
   TBranch        *b_reco_stub_truth_p_end_process;   //!
   TBranch        *b_reco_stub_truth_p_gstatus;   //!
   TBranch        *b_rec_reco_nstub;   //!
   TBranch        *b_rec_mc_nu_;   //!
   TBranch        *b_mc_nu_initpdg;   //!
   TBranch        *b_mc_nu_pdg;   //!
   TBranch        *b_mc_nu_inttype;   //!
   TBranch        *b_mc_nu_index;   //!
   TBranch        *b_mc_nu_targetPDG;   //!
   TBranch        *b_mc_nu_hitnuc;   //!
   TBranch        *b_mc_nu_genie_intcode;   //!
   TBranch        *b_mc_nu_isnc;   //!
   TBranch        *b_mc_nu_iscc;   //!
   TBranch        *b_mc_nu_isvtxcont;   //!
   TBranch        *b_mc_nu_is_numucc_primary;   //!
   TBranch        *b_mc_nu_E;   //!
   TBranch        *b_mc_nu_plane0VisE;   //!
   TBranch        *b_mc_nu_plane1VisE;   //!
   TBranch        *b_mc_nu_plane2VisE;   //!
   TBranch        *b_mc_nu_time;   //!
   TBranch        *b_mc_nu_bjorkenX;   //!
   TBranch        *b_mc_nu_inelasticityY;   //!
   TBranch        *b_mc_nu_Q2;   //!
   TBranch        *b_mc_nu_q0;   //!
   TBranch        *b_mc_nu_modq;   //!
   TBranch        *b_mc_nu_q0_lab;   //!
   TBranch        *b_mc_nu_modq_lab;   //!
   TBranch        *b_mc_nu_w;   //!
   TBranch        *b_mc_nu_t;   //!
   TBranch        *b_mc_nu_eccqe;   //!
   TBranch        *b_mc_nu_baseline;   //!
   TBranch        *b_mc_nu_npiplus;   //!
   TBranch        *b_mc_nu_npiminus;   //!
   TBranch        *b_mc_nu_npizero;   //!
   TBranch        *b_mc_nu_nproton;   //!
   TBranch        *b_mc_nu_nneutron;   //!
   TBranch        *b_mc_nu_ischarm;   //!
   TBranch        *b_mc_nu_isseaquark;   //!
   TBranch        *b_mc_nu_resnum;   //!
   TBranch        *b_mc_nu_xsec;   //!
   TBranch        *b_mc_nu_genweight;   //!
   TBranch        *b_mc_nu_plane0nhitprim;   //!
   TBranch        *b_mc_nu_plane1nhitprim;   //!
   TBranch        *b_mc_nu_plane2nhitprim;   //!
   TBranch        *b_mc_nu_plane0nhit;   //!
   TBranch        *b_mc_nu_plane1nhit;   //!
   TBranch        *b_mc_nu_plane2nhit;   //!
   TBranch        *b_mc_nu_parent_dcy_mode;   //!
   TBranch        *b_mc_nu_parent_pdg;   //!
   TBranch        *b_mc_nu_prod_vtx_x;   //!
   TBranch        *b_mc_nu_prod_vtx_y;   //!
   TBranch        *b_mc_nu_prod_vtx_z;   //!
   TBranch        *b_mc_nu_parent_dcy_mom_x;   //!
   TBranch        *b_mc_nu_parent_dcy_mom_y;   //!
   TBranch        *b_mc_nu_parent_dcy_mom_z;   //!
   TBranch        *b_mc_nu_parent_dcy_E;   //!
   TBranch        *b_mc_nu_imp_weight;   //!
   TBranch        *b_mc_nu_vtx_x;   //!
   TBranch        *b_mc_nu_vtx_y;   //!
   TBranch        *b_mc_nu_vtx_z;   //!
   TBranch        *b_mc_nu_momentum_x;   //!
   TBranch        *b_mc_nu_momentum_y;   //!
   TBranch        *b_mc_nu_momentum_z;   //!
   TBranch        *b_mc_nu_position_x;   //!
   TBranch        *b_mc_nu_position_y;   //!
   TBranch        *b_mc_nu_position_z;   //!
   TBranch        *b_mc_nu_det;   //!
   TBranch        *b_mc_nu_mode;   //!
   TBranch        *b_mc_nu_generator;   //!
   TBranch        *b_mc_nu_genVersion;   //!
   TBranch        *b_mc_nu_nprim;   //!
   TBranch        *b_rec_mc_nnu;   //!
   TBranch        *b_rec_mc_prtl_;   //!
   TBranch        *b_mc_prtl_gen;   //!
   TBranch        *b_mc_prtl_dcy_x;   //!
   TBranch        *b_mc_prtl_dcy_y;   //!
   TBranch        *b_mc_prtl_dcy_z;   //!
   TBranch        *b_mc_prtl_dcyT;   //!
   TBranch        *b_mc_prtl_mom_x;   //!
   TBranch        *b_mc_prtl_mom_y;   //!
   TBranch        *b_mc_prtl_mom_z;   //!
   TBranch        *b_mc_prtl_E;   //!
   TBranch        *b_mc_prtl_M;   //!
   TBranch        *b_mc_prtl_flux_weight;   //!
   TBranch        *b_mc_prtl_ray_weight;   //!
   TBranch        *b_mc_prtl_decay_weight;   //!
   TBranch        *b_mc_prtl_C1;   //!
   TBranch        *b_mc_prtl_C2;   //!
   TBranch        *b_mc_prtl_C3;   //!
   TBranch        *b_mc_prtl_C4;   //!
   TBranch        *b_mc_prtl_C5;   //!
   TBranch        *b_rec_mc_nprtl;   //!
   TBranch        *b_rec_nslc;   //!
   TBranch        *b_rec_slc_;   //!
   TBranch        *b_slc_producer;   //!
   TBranch        *b_slc_charge;   //!
   TBranch        *b_slc_vertex_x;   //!
   TBranch        *b_slc_vertex_y;   //!
   TBranch        *b_slc_vertex_z;   //!
   TBranch        *b_slc_truth_initpdg;   //!
   TBranch        *b_slc_truth_pdg;   //!
   TBranch        *b_slc_truth_inttype;   //!
   TBranch        *b_slc_truth_index;   //!
   TBranch        *b_slc_truth_targetPDG;   //!
   TBranch        *b_slc_truth_hitnuc;   //!
   TBranch        *b_slc_truth_genie_intcode;   //!
   TBranch        *b_slc_truth_isnc;   //!
   TBranch        *b_slc_truth_iscc;   //!
   TBranch        *b_slc_truth_isvtxcont;   //!
   TBranch        *b_slc_truth_is_numucc_primary;   //!
   TBranch        *b_slc_truth_E;   //!
   TBranch        *b_slc_truth_plane0VisE;   //!
   TBranch        *b_slc_truth_plane1VisE;   //!
   TBranch        *b_slc_truth_plane2VisE;   //!
   TBranch        *b_slc_truth_time;   //!
   TBranch        *b_slc_truth_bjorkenX;   //!
   TBranch        *b_slc_truth_inelasticityY;   //!
   TBranch        *b_slc_truth_Q2;   //!
   TBranch        *b_slc_truth_q0;   //!
   TBranch        *b_slc_truth_modq;   //!
   TBranch        *b_slc_truth_q0_lab;   //!
   TBranch        *b_slc_truth_modq_lab;   //!
   TBranch        *b_slc_truth_w;   //!
   TBranch        *b_slc_truth_t;   //!
   TBranch        *b_slc_truth_eccqe;   //!
   TBranch        *b_slc_truth_baseline;   //!
   TBranch        *b_slc_truth_npiplus;   //!
   TBranch        *b_slc_truth_npiminus;   //!
   TBranch        *b_slc_truth_npizero;   //!
   TBranch        *b_slc_truth_nproton;   //!
   TBranch        *b_slc_truth_nneutron;   //!
   TBranch        *b_slc_truth_ischarm;   //!
   TBranch        *b_slc_truth_isseaquark;   //!
   TBranch        *b_slc_truth_resnum;   //!
   TBranch        *b_slc_truth_xsec;   //!
   TBranch        *b_slc_truth_genweight;   //!
   TBranch        *b_slc_truth_plane0nhitprim;   //!
   TBranch        *b_slc_truth_plane1nhitprim;   //!
   TBranch        *b_slc_truth_plane2nhitprim;   //!
   TBranch        *b_slc_truth_plane0nhit;   //!
   TBranch        *b_slc_truth_plane1nhit;   //!
   TBranch        *b_slc_truth_plane2nhit;   //!
   TBranch        *b_slc_truth_parent_dcy_mode;   //!
   TBranch        *b_slc_truth_parent_pdg;   //!
   TBranch        *b_slc_truth_prod_vtx_x;   //!
   TBranch        *b_slc_truth_prod_vtx_y;   //!
   TBranch        *b_slc_truth_prod_vtx_z;   //!
   TBranch        *b_slc_truth_parent_dcy_mom_x;   //!
   TBranch        *b_slc_truth_parent_dcy_mom_y;   //!
   TBranch        *b_slc_truth_parent_dcy_mom_z;   //!
   TBranch        *b_slc_truth_parent_dcy_E;   //!
   TBranch        *b_slc_truth_imp_weight;   //!
   TBranch        *b_slc_truth_vtx_x;   //!
   TBranch        *b_slc_truth_vtx_y;   //!
   TBranch        *b_slc_truth_vtx_z;   //!
   TBranch        *b_slc_truth_momentum_x;   //!
   TBranch        *b_slc_truth_momentum_y;   //!
   TBranch        *b_slc_truth_momentum_z;   //!
   TBranch        *b_slc_truth_position_x;   //!
   TBranch        *b_slc_truth_position_y;   //!
   TBranch        *b_slc_truth_position_z;   //!
   TBranch        *b_slc_truth_det;   //!
   TBranch        *b_slc_truth_mode;   //!
   TBranch        *b_slc_truth_generator;   //!
   TBranch        *b_slc_truth_genVersion;   //!
   TBranch        *b_slc_truth_nprim;   //!
   TBranch        *b_slc_tmatch_eff;   //!
   TBranch        *b_slc_tmatch_pur;   //!
   TBranch        *b_slc_tmatch_visEinslc;   //!
   TBranch        *b_slc_tmatch_visEcosmic;   //!
   TBranch        *b_slc_tmatch_index;   //!
   TBranch        *b_slc_fmatch_present;   //!
   TBranch        *b_slc_fmatch_time;   //!
   TBranch        *b_slc_fmatch_chargeQ;   //!
   TBranch        *b_slc_fmatch_chargeCenter_x;   //!
   TBranch        *b_slc_fmatch_chargeCenter_y;   //!
   TBranch        *b_slc_fmatch_chargeCenter_z;   //!
   TBranch        *b_slc_fmatch_lightPE;   //!
   TBranch        *b_slc_fmatch_lightCenter_x;   //!
   TBranch        *b_slc_fmatch_lightCenter_y;   //!
   TBranch        *b_slc_fmatch_lightCenter_z;   //!
   TBranch        *b_slc_fmatch_score;   //!
   TBranch        *b_slc_fmatch_scoreY;   //!
   TBranch        *b_slc_fmatch_scoreZ;   //!
   TBranch        *b_slc_fmatch_scoreRR;   //!
   TBranch        *b_slc_fmatch_scoreRatio;   //!
   TBranch        *b_slc_fmatch_a_present;   //!
   TBranch        *b_slc_fmatch_a_time;   //!
   TBranch        *b_slc_fmatch_a_chargeQ;   //!
   TBranch        *b_slc_fmatch_a_chargeCenter_x;   //!
   TBranch        *b_slc_fmatch_a_chargeCenter_y;   //!
   TBranch        *b_slc_fmatch_a_chargeCenter_z;   //!
   TBranch        *b_slc_fmatch_a_lightPE;   //!
   TBranch        *b_slc_fmatch_a_lightCenter_x;   //!
   TBranch        *b_slc_fmatch_a_lightCenter_y;   //!
   TBranch        *b_slc_fmatch_a_lightCenter_z;   //!
   TBranch        *b_slc_fmatch_a_score;   //!
   TBranch        *b_slc_fmatch_a_scoreY;   //!
   TBranch        *b_slc_fmatch_a_scoreZ;   //!
   TBranch        *b_slc_fmatch_a_scoreRR;   //!
   TBranch        *b_slc_fmatch_a_scoreRatio;   //!
   TBranch        *b_slc_fmatch_b_present;   //!
   TBranch        *b_slc_fmatch_b_time;   //!
   TBranch        *b_slc_fmatch_b_chargeQ;   //!
   TBranch        *b_slc_fmatch_b_chargeCenter_x;   //!
   TBranch        *b_slc_fmatch_b_chargeCenter_y;   //!
   TBranch        *b_slc_fmatch_b_chargeCenter_z;   //!
   TBranch        *b_slc_fmatch_b_lightPE;   //!
   TBranch        *b_slc_fmatch_b_lightCenter_x;   //!
   TBranch        *b_slc_fmatch_b_lightCenter_y;   //!
   TBranch        *b_slc_fmatch_b_lightCenter_z;   //!
   TBranch        *b_slc_fmatch_b_score;   //!
   TBranch        *b_slc_fmatch_b_scoreY;   //!
   TBranch        *b_slc_fmatch_b_scoreZ;   //!
   TBranch        *b_slc_fmatch_b_scoreRR;   //!
   TBranch        *b_slc_fmatch_b_scoreRatio;   //!
   TBranch        *b_slc_fake_reco_nuE;   //!
   TBranch        *b_slc_fake_reco_vtx_x;   //!
   TBranch        *b_slc_fake_reco_vtx_y;   //!
   TBranch        *b_slc_fake_reco_vtx_z;   //!
   TBranch        *b_slc_fake_reco_lepton_ke;   //!
   TBranch        *b_slc_fake_reco_lepton_costh;   //!
   TBranch        *b_slc_fake_reco_lepton_len;   //!
   TBranch        *b_slc_fake_reco_lepton_pid;   //!
   TBranch        *b_slc_fake_reco_lepton_contained;   //!
   TBranch        *b_slc_fake_reco_nhad;   //!
   TBranch        *b_slc_fake_reco_wgt;   //!
   TBranch        *b_slc_fake_reco_filled;   //!
   TBranch        *b_slc_is_clear_cosmic;   //!
   TBranch        *b_slc_nu_pdg;   //!
   TBranch        *b_slc_nu_score;   //!
   TBranch        *b_slc_primary;   //!
   TBranch        *b_slc_self;   //!
   TBranch        *b_slc_reco_ntrk;   //!
   TBranch        *b_slc_reco_nshw;   //!
   TBranch        *b_slc_reco_nstub;   //!
   TBranch        *b_rec_nfake_reco;   //!
   TBranch        *b_rec_fake_reco_;   //!
   TBranch        *b_fake_reco_nuE;   //!
   TBranch        *b_fake_reco_vtx_x;   //!
   TBranch        *b_fake_reco_vtx_y;   //!
   TBranch        *b_fake_reco_vtx_z;   //!
   TBranch        *b_fake_reco_lepton_ke;   //!
   TBranch        *b_fake_reco_lepton_costh;   //!
   TBranch        *b_fake_reco_lepton_len;   //!
   TBranch        *b_fake_reco_lepton_pid;   //!
   TBranch        *b_fake_reco_lepton_contained;   //!
   TBranch        *b_fake_reco_nhad;   //!
   TBranch        *b_fake_reco_wgt;   //!
   TBranch        *b_fake_reco_filled;   //!
   TBranch        *b_rec_ntrue_particles;   //!
   TBranch        *b_rec_true_particles_;   //!
   TBranch        *b_true_particles_plane0VisE;   //!
   TBranch        *b_true_particles_plane1VisE;   //!
   TBranch        *b_true_particles_plane2VisE;   //!
   TBranch        *b_true_particles_genE;   //!
   TBranch        *b_true_particles_startE;   //!
   TBranch        *b_true_particles_endE;   //!
   TBranch        *b_true_particles_genT;   //!
   TBranch        *b_true_particles_startT;   //!
   TBranch        *b_true_particles_endT;   //!
   TBranch        *b_true_particles_length;   //!
   TBranch        *b_true_particles_plane0nhit;   //!
   TBranch        *b_true_particles_plane1nhit;   //!
   TBranch        *b_true_particles_plane2nhit;   //!
   TBranch        *b_true_particles_genp_x;   //!
   TBranch        *b_true_particles_genp_y;   //!
   TBranch        *b_true_particles_genp_z;   //!
   TBranch        *b_true_particles_startp_x;   //!
   TBranch        *b_true_particles_startp_y;   //!
   TBranch        *b_true_particles_startp_z;   //!
   TBranch        *b_true_particles_endp_x;   //!
   TBranch        *b_true_particles_endp_y;   //!
   TBranch        *b_true_particles_endp_z;   //!
   TBranch        *b_true_particles_gen_x;   //!
   TBranch        *b_true_particles_gen_y;   //!
   TBranch        *b_true_particles_gen_z;   //!
   TBranch        *b_true_particles_start_x;   //!
   TBranch        *b_true_particles_start_y;   //!
   TBranch        *b_true_particles_start_z;   //!
   TBranch        *b_true_particles_end_x;   //!
   TBranch        *b_true_particles_end_y;   //!
   TBranch        *b_true_particles_end_z;   //!
   TBranch        *b_true_particles_wallin;   //!
   TBranch        *b_true_particles_wallout;   //!
   TBranch        *b_true_particles_cont_tpc;   //!
   TBranch        *b_true_particles_crosses_tpc;   //!
   TBranch        *b_true_particles_contained;   //!
   TBranch        *b_true_particles_pdg;   //!
   TBranch        *b_true_particles_G4ID;   //!
   TBranch        *b_true_particles_interaction_id;   //!
   TBranch        *b_true_particles_daughters;   //!
   TBranch        *b_true_particles_parent;   //!
   TBranch        *b_true_particles_generator;   //!
   TBranch        *b_true_particles_start_process;   //!
   TBranch        *b_true_particles_end_process;   //!
   TBranch        *b_true_particles_gstatus;   //!
   TBranch        *b_rec_ncrt_hits;   //!
   TBranch        *b_rec_crt_hits_;   //!
   TBranch        *b_crt_hits_position_x;   //!
   TBranch        *b_crt_hits_position_y;   //!
   TBranch        *b_crt_hits_position_z;   //!
   TBranch        *b_crt_hits_position_err_x;   //!
   TBranch        *b_crt_hits_position_err_y;   //!
   TBranch        *b_crt_hits_position_err_z;   //!
   TBranch        *b_crt_hits_time;   //!
   TBranch        *b_crt_hits_pe;   //!
   TBranch        *b_crt_hits_plane;   //!
   TBranch        *b_rec_ncrt_tracks;   //!
   TBranch        *b_rec_crt_tracks_;   //!
   TBranch        *b_crt_tracks_hita_position_x;   //!
   TBranch        *b_crt_tracks_hita_position_y;   //!
   TBranch        *b_crt_tracks_hita_position_z;   //!
   TBranch        *b_crt_tracks_hita_position_err_x;   //!
   TBranch        *b_crt_tracks_hita_position_err_y;   //!
   TBranch        *b_crt_tracks_hita_position_err_z;   //!
   TBranch        *b_crt_tracks_hita_time;   //!
   TBranch        *b_crt_tracks_hita_pe;   //!
   TBranch        *b_crt_tracks_hita_plane;   //!
   TBranch        *b_crt_tracks_hitb_position_x;   //!
   TBranch        *b_crt_tracks_hitb_position_y;   //!
   TBranch        *b_crt_tracks_hitb_position_z;   //!
   TBranch        *b_crt_tracks_hitb_position_err_x;   //!
   TBranch        *b_crt_tracks_hitb_position_err_y;   //!
   TBranch        *b_crt_tracks_hitb_position_err_z;   //!
   TBranch        *b_crt_tracks_hitb_time;   //!
   TBranch        *b_crt_tracks_hitb_pe;   //!
   TBranch        *b_crt_tracks_hitb_plane;   //!
   TBranch        *b_crt_tracks_time;   //!
   TBranch        *b_rec_pass_flashtrig;   //!

   recTree(TTree *tree=0);
   virtual ~recTree();
   virtual Int_t    Cut(Long64_t entry);
   virtual Int_t    GetEntry(Long64_t entry);
   virtual Long64_t LoadTree(Long64_t entry);
   virtual void     Init(TTree *tree);
   virtual void     Loop();
   virtual Bool_t   Notify();
   virtual void     Show(Long64_t entry = -1);
   double  MyAcos(double px,double py,double pz);

};

#endif

#ifdef recTree_cxx
recTree::recTree(TTree *tree) : fChain(0) 
{
//// if parameter tree is not specified (or zero), connect the file
//// used to generate this class and read the Tree.
//   if (tree == 0) {
//      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("caf_0.root");
//      if (!f || !f->IsOpen()) {
//         f = new TFile("caf_0.root");
//      }
//      f->GetObject("recTree",tree);
//
//   }
   // The following code should be used if you want this class to access a chain
      // of trees.
      TChain * chain = new TChain("recTree","");
      chain->Add("/scratch/andrzej/concat_caf_0-b70120bf-fe82-40e5-8fff-2ab9117324e5.root/recTree");
      chain->Add("/scratch/andrzej/concat_caf_1-900aadd1-df60-4d86-9ccf-20a08c11c6d4.root/recTree");
      chain->Add("/scratch/andrzej/concat_caf_2-bad55df4-16df-4dc9-b71e-4e5fd5b4ae3f.root/recTree");
      chain->Add("/scratch/andrzej/concat_caf_3-50b34461-e956-42a2-ae27-6c90f90a2182.root/recTree");
      tree = chain;

   Init(tree);
}

recTree::~recTree()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t recTree::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t recTree::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->GetTreeNumber() != fCurrent) {
      fCurrent = fChain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void recTree::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("hdr.run", &hdr_run, &b_rec_hdr_run);
   fChain->SetBranchAddress("hdr.subrun", &hdr_subrun, &b_rec_hdr_subrun);
   fChain->SetBranchAddress("hdr.evt", &hdr_evt, &b_rec_hdr_evt);
   fChain->SetBranchAddress("hdr.subevt", &hdr_subevt, &b_rec_hdr_subevt);
   fChain->SetBranchAddress("hdr.ismc", &hdr_ismc, &b_rec_hdr_ismc);
   fChain->SetBranchAddress("hdr.fno", &hdr_fno, &b_rec_hdr_fno);
   fChain->SetBranchAddress("hdr.ngenevt", &hdr_ngenevt, &b_rec_hdr_ngenevt);
   fChain->SetBranchAddress("hdr.pot", &hdr_pot, &b_rec_hdr_pot);
   fChain->SetBranchAddress("hdr.mctype", &hdr_mctype, &b_rec_hdr_mctype);
   fChain->SetBranchAddress("hdr.det", &hdr_det, &b_rec_hdr_det);
   fChain->SetBranchAddress("hdr.first_in_subrun", &hdr_first_in_subrun, &b_rec_hdr_first_in_subrun);
   fChain->SetBranchAddress("hdr.first_in_file", &hdr_first_in_file, &b_rec_hdr_first_in_file);
   fChain->SetBranchAddress("reco.trk", &reco_trk_, &b_rec_reco_trk_);
   fChain->SetBranchAddress("reco.trk.producer", reco_trk_producer, &b_reco_trk_producer);
   fChain->SetBranchAddress("reco.trk.npts", reco_trk_npts, &b_reco_trk_npts);
   fChain->SetBranchAddress("reco.trk.len", reco_trk_len, &b_reco_trk_len);
   fChain->SetBranchAddress("reco.trk.costh", reco_trk_costh, &b_reco_trk_costh);
   fChain->SetBranchAddress("reco.trk.phi", reco_trk_phi, &b_reco_trk_phi);
   fChain->SetBranchAddress("reco.trk.dir.x", reco_trk_dir_x, &b_reco_trk_dir_x);
   fChain->SetBranchAddress("reco.trk.dir.y", reco_trk_dir_y, &b_reco_trk_dir_y);
   fChain->SetBranchAddress("reco.trk.dir.z", reco_trk_dir_z, &b_reco_trk_dir_z);
   fChain->SetBranchAddress("reco.trk.dir_end.x", reco_trk_dir_end_x, &b_reco_trk_dir_end_x);
   fChain->SetBranchAddress("reco.trk.dir_end.y", reco_trk_dir_end_y, &b_reco_trk_dir_end_y);
   fChain->SetBranchAddress("reco.trk.dir_end.z", reco_trk_dir_end_z, &b_reco_trk_dir_end_z);
   fChain->SetBranchAddress("reco.trk.start.x", reco_trk_start_x, &b_reco_trk_start_x);
   fChain->SetBranchAddress("reco.trk.start.y", reco_trk_start_y, &b_reco_trk_start_y);
   fChain->SetBranchAddress("reco.trk.start.z", reco_trk_start_z, &b_reco_trk_start_z);
   fChain->SetBranchAddress("reco.trk.end.x", reco_trk_end_x, &b_reco_trk_end_x);
   fChain->SetBranchAddress("reco.trk.end.y", reco_trk_end_y, &b_reco_trk_end_y);
   fChain->SetBranchAddress("reco.trk.end.z", reco_trk_end_z, &b_reco_trk_end_z);
   fChain->SetBranchAddress("reco.trk.ID", reco_trk_ID, &b_reco_trk_ID);
   fChain->SetBranchAddress("reco.trk.chi2pid0.pdg", reco_trk_chi2pid0_pdg, &b_reco_trk_chi2pid0_pdg);
   fChain->SetBranchAddress("reco.trk.chi2pid0.pid_ndof", reco_trk_chi2pid0_pid_ndof, &b_reco_trk_chi2pid0_pid_ndof);
   fChain->SetBranchAddress("reco.trk.chi2pid0.chi2_muon", reco_trk_chi2pid0_chi2_muon, &b_reco_trk_chi2pid0_chi2_muon);
   fChain->SetBranchAddress("reco.trk.chi2pid0.chi2_pion", reco_trk_chi2pid0_chi2_pion, &b_reco_trk_chi2pid0_chi2_pion);
   fChain->SetBranchAddress("reco.trk.chi2pid0.chi2_kaon", reco_trk_chi2pid0_chi2_kaon, &b_reco_trk_chi2pid0_chi2_kaon);
   fChain->SetBranchAddress("reco.trk.chi2pid0.chi2_proton", reco_trk_chi2pid0_chi2_proton, &b_reco_trk_chi2pid0_chi2_proton);
   fChain->SetBranchAddress("reco.trk.chi2pid0.pida", reco_trk_chi2pid0_pida, &b_reco_trk_chi2pid0_pida);
   fChain->SetBranchAddress("reco.trk.chi2pid1.pdg", reco_trk_chi2pid1_pdg, &b_reco_trk_chi2pid1_pdg);
   fChain->SetBranchAddress("reco.trk.chi2pid1.pid_ndof", reco_trk_chi2pid1_pid_ndof, &b_reco_trk_chi2pid1_pid_ndof);
   fChain->SetBranchAddress("reco.trk.chi2pid1.chi2_muon", reco_trk_chi2pid1_chi2_muon, &b_reco_trk_chi2pid1_chi2_muon);
   fChain->SetBranchAddress("reco.trk.chi2pid1.chi2_pion", reco_trk_chi2pid1_chi2_pion, &b_reco_trk_chi2pid1_chi2_pion);
   fChain->SetBranchAddress("reco.trk.chi2pid1.chi2_kaon", reco_trk_chi2pid1_chi2_kaon, &b_reco_trk_chi2pid1_chi2_kaon);
   fChain->SetBranchAddress("reco.trk.chi2pid1.chi2_proton", reco_trk_chi2pid1_chi2_proton, &b_reco_trk_chi2pid1_chi2_proton);
   fChain->SetBranchAddress("reco.trk.chi2pid1.pida", reco_trk_chi2pid1_pida, &b_reco_trk_chi2pid1_pida);
   fChain->SetBranchAddress("reco.trk.chi2pid2.pdg", reco_trk_chi2pid2_pdg, &b_reco_trk_chi2pid2_pdg);
   fChain->SetBranchAddress("reco.trk.chi2pid2.pid_ndof", reco_trk_chi2pid2_pid_ndof, &b_reco_trk_chi2pid2_pid_ndof);
   fChain->SetBranchAddress("reco.trk.chi2pid2.chi2_muon", reco_trk_chi2pid2_chi2_muon, &b_reco_trk_chi2pid2_chi2_muon);
   fChain->SetBranchAddress("reco.trk.chi2pid2.chi2_pion", reco_trk_chi2pid2_chi2_pion, &b_reco_trk_chi2pid2_chi2_pion);
   fChain->SetBranchAddress("reco.trk.chi2pid2.chi2_kaon", reco_trk_chi2pid2_chi2_kaon, &b_reco_trk_chi2pid2_chi2_kaon);
   fChain->SetBranchAddress("reco.trk.chi2pid2.chi2_proton", reco_trk_chi2pid2_chi2_proton, &b_reco_trk_chi2pid2_chi2_proton);
   fChain->SetBranchAddress("reco.trk.chi2pid2.pida", reco_trk_chi2pid2_pida, &b_reco_trk_chi2pid2_pida);
   fChain->SetBranchAddress("reco.trk.calo0.nhit", reco_trk_calo0_nhit, &b_reco_trk_calo0_nhit);
   fChain->SetBranchAddress("reco.trk.calo0.ke", reco_trk_calo0_ke, &b_reco_trk_calo0_ke);
   fChain->SetBranchAddress("reco.trk.calo0.charge", reco_trk_calo0_charge, &b_reco_trk_calo0_charge);
   fChain->SetBranchAddress("reco.trk.calo1.nhit", reco_trk_calo1_nhit, &b_reco_trk_calo1_nhit);
   fChain->SetBranchAddress("reco.trk.calo1.ke", reco_trk_calo1_ke, &b_reco_trk_calo1_ke);
   fChain->SetBranchAddress("reco.trk.calo1.charge", reco_trk_calo1_charge, &b_reco_trk_calo1_charge);
   fChain->SetBranchAddress("reco.trk.calo2.nhit", reco_trk_calo2_nhit, &b_reco_trk_calo2_nhit);
   fChain->SetBranchAddress("reco.trk.calo2.ke", reco_trk_calo2_ke, &b_reco_trk_calo2_ke);
   fChain->SetBranchAddress("reco.trk.calo2.charge", reco_trk_calo2_charge, &b_reco_trk_calo2_charge);
   fChain->SetBranchAddress("reco.trk.bestplane", reco_trk_bestplane, &b_reco_trk_bestplane);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_muon", reco_trk_mcsP_fwdP_muon, &b_reco_trk_mcsP_fwdP_muon);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_pion", reco_trk_mcsP_fwdP_pion, &b_reco_trk_mcsP_fwdP_pion);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_kaon", reco_trk_mcsP_fwdP_kaon, &b_reco_trk_mcsP_fwdP_kaon);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_proton", reco_trk_mcsP_fwdP_proton, &b_reco_trk_mcsP_fwdP_proton);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_err_muon", reco_trk_mcsP_fwdP_err_muon, &b_reco_trk_mcsP_fwdP_err_muon);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_err_pion", reco_trk_mcsP_fwdP_err_pion, &b_reco_trk_mcsP_fwdP_err_pion);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_err_kaon", reco_trk_mcsP_fwdP_err_kaon, &b_reco_trk_mcsP_fwdP_err_kaon);
   fChain->SetBranchAddress("reco.trk.mcsP.fwdP_err_proton", reco_trk_mcsP_fwdP_err_proton, &b_reco_trk_mcsP_fwdP_err_proton);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_muon", reco_trk_mcsP_bwdP_muon, &b_reco_trk_mcsP_bwdP_muon);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_pion", reco_trk_mcsP_bwdP_pion, &b_reco_trk_mcsP_bwdP_pion);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_kaon", reco_trk_mcsP_bwdP_kaon, &b_reco_trk_mcsP_bwdP_kaon);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_proton", reco_trk_mcsP_bwdP_proton, &b_reco_trk_mcsP_bwdP_proton);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_err_muon", reco_trk_mcsP_bwdP_err_muon, &b_reco_trk_mcsP_bwdP_err_muon);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_err_pion", reco_trk_mcsP_bwdP_err_pion, &b_reco_trk_mcsP_bwdP_err_pion);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_err_kaon", reco_trk_mcsP_bwdP_err_kaon, &b_reco_trk_mcsP_bwdP_err_kaon);
   fChain->SetBranchAddress("reco.trk.mcsP.bwdP_err_proton", reco_trk_mcsP_bwdP_err_proton, &b_reco_trk_mcsP_bwdP_err_proton);
   fChain->SetBranchAddress("reco.trk.mcsP.is_bwd_muon", reco_trk_mcsP_is_bwd_muon, &b_reco_trk_mcsP_is_bwd_muon);
   fChain->SetBranchAddress("reco.trk.mcsP.is_bwd_pion", reco_trk_mcsP_is_bwd_pion, &b_reco_trk_mcsP_is_bwd_pion);
   fChain->SetBranchAddress("reco.trk.mcsP.is_bwd_kaon", reco_trk_mcsP_is_bwd_kaon, &b_reco_trk_mcsP_is_bwd_kaon);
   fChain->SetBranchAddress("reco.trk.mcsP.is_bwd_proton", reco_trk_mcsP_is_bwd_proton, &b_reco_trk_mcsP_is_bwd_proton);
   fChain->SetBranchAddress("reco.trk.rangeP.p_muon", reco_trk_rangeP_p_muon, &b_reco_trk_rangeP_p_muon);
   fChain->SetBranchAddress("reco.trk.rangeP.p_pion", reco_trk_rangeP_p_pion, &b_reco_trk_rangeP_p_pion);
   fChain->SetBranchAddress("reco.trk.rangeP.p_proton", reco_trk_rangeP_p_proton, &b_reco_trk_rangeP_p_proton);
   fChain->SetBranchAddress("reco.trk.truth.total_deposited_energy", reco_trk_truth_total_deposited_energy, &b_reco_trk_truth_total_deposited_energy);
   fChain->SetBranchAddress("reco.trk.truth.nmatches", reco_trk_truth_nmatches, &b_reco_trk_truth_nmatches);
   fChain->SetBranchAddress("reco.trk.truth.bestmatch.G4ID", reco_trk_truth_bestmatch_G4ID, &b_reco_trk_truth_bestmatch_G4ID);
   fChain->SetBranchAddress("reco.trk.truth.bestmatch.energy", reco_trk_truth_bestmatch_energy, &b_reco_trk_truth_bestmatch_energy);
   fChain->SetBranchAddress("reco.trk.truth.p.plane0VisE", reco_trk_truth_p_plane0VisE, &b_reco_trk_truth_p_plane0VisE);
   fChain->SetBranchAddress("reco.trk.truth.p.plane1VisE", reco_trk_truth_p_plane1VisE, &b_reco_trk_truth_p_plane1VisE);
   fChain->SetBranchAddress("reco.trk.truth.p.plane2VisE", reco_trk_truth_p_plane2VisE, &b_reco_trk_truth_p_plane2VisE);
   fChain->SetBranchAddress("reco.trk.truth.p.genE", reco_trk_truth_p_genE, &b_reco_trk_truth_p_genE);
   fChain->SetBranchAddress("reco.trk.truth.p.startE", reco_trk_truth_p_startE, &b_reco_trk_truth_p_startE);
   fChain->SetBranchAddress("reco.trk.truth.p.endE", reco_trk_truth_p_endE, &b_reco_trk_truth_p_endE);
   fChain->SetBranchAddress("reco.trk.truth.p.genT", reco_trk_truth_p_genT, &b_reco_trk_truth_p_genT);
   fChain->SetBranchAddress("reco.trk.truth.p.startT", reco_trk_truth_p_startT, &b_reco_trk_truth_p_startT);
   fChain->SetBranchAddress("reco.trk.truth.p.endT", reco_trk_truth_p_endT, &b_reco_trk_truth_p_endT);
   fChain->SetBranchAddress("reco.trk.truth.p.length", reco_trk_truth_p_length, &b_reco_trk_truth_p_length);
   fChain->SetBranchAddress("reco.trk.truth.p.plane0nhit", reco_trk_truth_p_plane0nhit, &b_reco_trk_truth_p_plane0nhit);
   fChain->SetBranchAddress("reco.trk.truth.p.plane1nhit", reco_trk_truth_p_plane1nhit, &b_reco_trk_truth_p_plane1nhit);
   fChain->SetBranchAddress("reco.trk.truth.p.plane2nhit", reco_trk_truth_p_plane2nhit, &b_reco_trk_truth_p_plane2nhit);
   fChain->SetBranchAddress("reco.trk.truth.p.genp.x", reco_trk_truth_p_genp_x, &b_reco_trk_truth_p_genp_x);
   fChain->SetBranchAddress("reco.trk.truth.p.genp.y", reco_trk_truth_p_genp_y, &b_reco_trk_truth_p_genp_y);
   fChain->SetBranchAddress("reco.trk.truth.p.genp.z", reco_trk_truth_p_genp_z, &b_reco_trk_truth_p_genp_z);
   fChain->SetBranchAddress("reco.trk.truth.p.startp.x", reco_trk_truth_p_startp_x, &b_reco_trk_truth_p_startp_x);
   fChain->SetBranchAddress("reco.trk.truth.p.startp.y", reco_trk_truth_p_startp_y, &b_reco_trk_truth_p_startp_y);
   fChain->SetBranchAddress("reco.trk.truth.p.startp.z", reco_trk_truth_p_startp_z, &b_reco_trk_truth_p_startp_z);
   fChain->SetBranchAddress("reco.trk.truth.p.endp.x", reco_trk_truth_p_endp_x, &b_reco_trk_truth_p_endp_x);
   fChain->SetBranchAddress("reco.trk.truth.p.endp.y", reco_trk_truth_p_endp_y, &b_reco_trk_truth_p_endp_y);
   fChain->SetBranchAddress("reco.trk.truth.p.endp.z", reco_trk_truth_p_endp_z, &b_reco_trk_truth_p_endp_z);
   fChain->SetBranchAddress("reco.trk.truth.p.gen.x", reco_trk_truth_p_gen_x, &b_reco_trk_truth_p_gen_x);
   fChain->SetBranchAddress("reco.trk.truth.p.gen.y", reco_trk_truth_p_gen_y, &b_reco_trk_truth_p_gen_y);
   fChain->SetBranchAddress("reco.trk.truth.p.gen.z", reco_trk_truth_p_gen_z, &b_reco_trk_truth_p_gen_z);
   fChain->SetBranchAddress("reco.trk.truth.p.start.x", reco_trk_truth_p_start_x, &b_reco_trk_truth_p_start_x);
   fChain->SetBranchAddress("reco.trk.truth.p.start.y", reco_trk_truth_p_start_y, &b_reco_trk_truth_p_start_y);
   fChain->SetBranchAddress("reco.trk.truth.p.start.z", reco_trk_truth_p_start_z, &b_reco_trk_truth_p_start_z);
   fChain->SetBranchAddress("reco.trk.truth.p.end.x", reco_trk_truth_p_end_x, &b_reco_trk_truth_p_end_x);
   fChain->SetBranchAddress("reco.trk.truth.p.end.y", reco_trk_truth_p_end_y, &b_reco_trk_truth_p_end_y);
   fChain->SetBranchAddress("reco.trk.truth.p.end.z", reco_trk_truth_p_end_z, &b_reco_trk_truth_p_end_z);
   fChain->SetBranchAddress("reco.trk.truth.p.wallin", reco_trk_truth_p_wallin, &b_reco_trk_truth_p_wallin);
   fChain->SetBranchAddress("reco.trk.truth.p.wallout", reco_trk_truth_p_wallout, &b_reco_trk_truth_p_wallout);
   fChain->SetBranchAddress("reco.trk.truth.p.cont_tpc", reco_trk_truth_p_cont_tpc, &b_reco_trk_truth_p_cont_tpc);
   fChain->SetBranchAddress("reco.trk.truth.p.crosses_tpc", reco_trk_truth_p_crosses_tpc, &b_reco_trk_truth_p_crosses_tpc);
   fChain->SetBranchAddress("reco.trk.truth.p.contained", reco_trk_truth_p_contained, &b_reco_trk_truth_p_contained);
   fChain->SetBranchAddress("reco.trk.truth.p.pdg", reco_trk_truth_p_pdg, &b_reco_trk_truth_p_pdg);
   fChain->SetBranchAddress("reco.trk.truth.p.G4ID", reco_trk_truth_p_G4ID, &b_reco_trk_truth_p_G4ID);
   fChain->SetBranchAddress("reco.trk.truth.p.interaction_id", reco_trk_truth_p_interaction_id, &b_reco_trk_truth_p_interaction_id);
   fChain->SetBranchAddress("reco.trk.truth.p.daughters", reco_trk_truth_p_daughters, &b_reco_trk_truth_p_daughters);
   fChain->SetBranchAddress("reco.trk.truth.p.parent", reco_trk_truth_p_parent, &b_reco_trk_truth_p_parent);
   fChain->SetBranchAddress("reco.trk.truth.p.generator", reco_trk_truth_p_generator, &b_reco_trk_truth_p_generator);
   fChain->SetBranchAddress("reco.trk.truth.p.start_process", reco_trk_truth_p_start_process, &b_reco_trk_truth_p_start_process);
   fChain->SetBranchAddress("reco.trk.truth.p.end_process", reco_trk_truth_p_end_process, &b_reco_trk_truth_p_end_process);
   fChain->SetBranchAddress("reco.trk.truth.p.gstatus", reco_trk_truth_p_gstatus, &b_reco_trk_truth_p_gstatus);
   fChain->SetBranchAddress("reco.trk.crthit.hit.position.x", reco_trk_crthit_hit_position_x, &b_reco_trk_crthit_hit_position_x);
   fChain->SetBranchAddress("reco.trk.crthit.hit.position.y", reco_trk_crthit_hit_position_y, &b_reco_trk_crthit_hit_position_y);
   fChain->SetBranchAddress("reco.trk.crthit.hit.position.z", reco_trk_crthit_hit_position_z, &b_reco_trk_crthit_hit_position_z);
   fChain->SetBranchAddress("reco.trk.crthit.hit.position_err.x", reco_trk_crthit_hit_position_err_x, &b_reco_trk_crthit_hit_position_err_x);
   fChain->SetBranchAddress("reco.trk.crthit.hit.position_err.y", reco_trk_crthit_hit_position_err_y, &b_reco_trk_crthit_hit_position_err_y);
   fChain->SetBranchAddress("reco.trk.crthit.hit.position_err.z", reco_trk_crthit_hit_position_err_z, &b_reco_trk_crthit_hit_position_err_z);
   fChain->SetBranchAddress("reco.trk.crthit.hit.time", reco_trk_crthit_hit_time, &b_reco_trk_crthit_hit_time);
   fChain->SetBranchAddress("reco.trk.crthit.hit.pe", reco_trk_crthit_hit_pe, &b_reco_trk_crthit_hit_pe);
   fChain->SetBranchAddress("reco.trk.crthit.hit.plane", reco_trk_crthit_hit_plane, &b_reco_trk_crthit_hit_plane);
   fChain->SetBranchAddress("reco.trk.crthit.distance", reco_trk_crthit_distance, &b_reco_trk_crthit_distance);
   fChain->SetBranchAddress("reco.trk.crttrack.time", reco_trk_crttrack_time, &b_reco_trk_crttrack_time);
   fChain->SetBranchAddress("reco.trk.crttrack.angle", reco_trk_crttrack_angle, &b_reco_trk_crttrack_angle);
   fChain->SetBranchAddress("reco.trk.pfp.id", reco_trk_pfp_id, &b_reco_trk_pfp_id);
   fChain->SetBranchAddress("reco.trk.pfp.ndaughters", reco_trk_pfp_ndaughters, &b_reco_trk_pfp_ndaughters);
   fChain->SetBranchAddress("reco.trk.pfp.daughters", reco_trk_pfp_daughters, &b_reco_trk_pfp_daughters);
   fChain->SetBranchAddress("reco.trk.pfp.parent", reco_trk_pfp_parent, &b_reco_trk_pfp_parent);
   fChain->SetBranchAddress("reco.trk.pfp.parent_is_primary", reco_trk_pfp_parent_is_primary, &b_reco_trk_pfp_parent_is_primary);
   fChain->SetBranchAddress("reco.trk.pfp.trackScore", reco_trk_pfp_trackScore, &b_reco_trk_pfp_trackScore);
   fChain->SetBranchAddress("reco.trk.pfp.slcID", reco_trk_pfp_slcID, &b_reco_trk_pfp_slcID);
   fChain->SetBranchAddress("reco.trk.scatterClosestApproach.mean", reco_trk_scatterClosestApproach_mean, &b_reco_trk_scatterClosestApproach_mean);
   fChain->SetBranchAddress("reco.trk.scatterClosestApproach.stdDev", reco_trk_scatterClosestApproach_stdDev, &b_reco_trk_scatterClosestApproach_stdDev);
   fChain->SetBranchAddress("reco.trk.scatterClosestApproach.max", reco_trk_scatterClosestApproach_max, &b_reco_trk_scatterClosestApproach_max);
   fChain->SetBranchAddress("reco.trk.stoppingChi2Fit.pol0Chi2", reco_trk_stoppingChi2Fit_pol0Chi2, &b_reco_trk_stoppingChi2Fit_pol0Chi2);
   fChain->SetBranchAddress("reco.trk.stoppingChi2Fit.expChi2", reco_trk_stoppingChi2Fit_expChi2, &b_reco_trk_stoppingChi2Fit_expChi2);
   fChain->SetBranchAddress("reco.trk.stoppingChi2Fit.pol0Fit", reco_trk_stoppingChi2Fit_pol0Fit, &b_reco_trk_stoppingChi2Fit_pol0Fit);
   fChain->SetBranchAddress("reco.trk.dazzle.pdg", reco_trk_dazzle_pdg, &b_reco_trk_dazzle_pdg);
   fChain->SetBranchAddress("reco.trk.dazzle.muonScore", reco_trk_dazzle_muonScore, &b_reco_trk_dazzle_muonScore);
   fChain->SetBranchAddress("reco.trk.dazzle.pionScore", reco_trk_dazzle_pionScore, &b_reco_trk_dazzle_pionScore);
   fChain->SetBranchAddress("reco.trk.dazzle.protonScore", reco_trk_dazzle_protonScore, &b_reco_trk_dazzle_protonScore);
   fChain->SetBranchAddress("reco.trk.dazzle.otherScore", reco_trk_dazzle_otherScore, &b_reco_trk_dazzle_otherScore);
   fChain->SetBranchAddress("reco.trk.dazzle.bestScore", reco_trk_dazzle_bestScore, &b_reco_trk_dazzle_bestScore);
   fChain->SetBranchAddress("reco.ntrk", &reco_ntrk, &b_rec_reco_ntrk);
   fChain->SetBranchAddress("reco.shw", &reco_shw_, &b_rec_reco_shw_);
   fChain->SetBranchAddress("reco.shw.bestplane", reco_shw_bestplane, &b_reco_shw_bestplane);
   fChain->SetBranchAddress("reco.shw.bestplane_dEdx", reco_shw_bestplane_dEdx, &b_reco_shw_bestplane_dEdx);
   fChain->SetBranchAddress("reco.shw.bestplane_energy", reco_shw_bestplane_energy, &b_reco_shw_bestplane_energy);
   fChain->SetBranchAddress("reco.shw.conversion_gap", reco_shw_conversion_gap, &b_reco_shw_conversion_gap);
   fChain->SetBranchAddress("reco.shw.density", reco_shw_density, &b_reco_shw_density);
   fChain->SetBranchAddress("reco.shw.len", reco_shw_len, &b_reco_shw_len);
   fChain->SetBranchAddress("reco.shw.open_angle", reco_shw_open_angle, &b_reco_shw_open_angle);
   fChain->SetBranchAddress("reco.shw.dEdx_plane0", reco_shw_dEdx_plane0, &b_reco_shw_dEdx_plane0);
   fChain->SetBranchAddress("reco.shw.dEdx_plane1", reco_shw_dEdx_plane1, &b_reco_shw_dEdx_plane1);
   fChain->SetBranchAddress("reco.shw.dEdx_plane2", reco_shw_dEdx_plane2, &b_reco_shw_dEdx_plane2);
   fChain->SetBranchAddress("reco.shw.energy_plane0", reco_shw_energy_plane0, &b_reco_shw_energy_plane0);
   fChain->SetBranchAddress("reco.shw.energy_plane1", reco_shw_energy_plane1, &b_reco_shw_energy_plane1);
   fChain->SetBranchAddress("reco.shw.energy_plane2", reco_shw_energy_plane2, &b_reco_shw_energy_plane2);
   fChain->SetBranchAddress("reco.shw.nHits_plane0", reco_shw_nHits_plane0, &b_reco_shw_nHits_plane0);
   fChain->SetBranchAddress("reco.shw.nHits_plane1", reco_shw_nHits_plane1, &b_reco_shw_nHits_plane1);
   fChain->SetBranchAddress("reco.shw.nHits_plane2", reco_shw_nHits_plane2, &b_reco_shw_nHits_plane2);
   fChain->SetBranchAddress("reco.shw.wirePitch_plane0", reco_shw_wirePitch_plane0, &b_reco_shw_wirePitch_plane0);
   fChain->SetBranchAddress("reco.shw.wirePitch_plane1", reco_shw_wirePitch_plane1, &b_reco_shw_wirePitch_plane1);
   fChain->SetBranchAddress("reco.shw.wirePitch_plane2", reco_shw_wirePitch_plane2, &b_reco_shw_wirePitch_plane2);
   fChain->SetBranchAddress("reco.shw.dEdx", reco_shw_dEdx, &b_reco_shw_dEdx);
   fChain->SetBranchAddress("reco.shw.energy", reco_shw_energy, &b_reco_shw_energy);
   fChain->SetBranchAddress("reco.shw.dir.x", reco_shw_dir_x, &b_reco_shw_dir_x);
   fChain->SetBranchAddress("reco.shw.dir.y", reco_shw_dir_y, &b_reco_shw_dir_y);
   fChain->SetBranchAddress("reco.shw.dir.z", reco_shw_dir_z, &b_reco_shw_dir_z);
   fChain->SetBranchAddress("reco.shw.start.x", reco_shw_start_x, &b_reco_shw_start_x);
   fChain->SetBranchAddress("reco.shw.start.y", reco_shw_start_y, &b_reco_shw_start_y);
   fChain->SetBranchAddress("reco.shw.start.z", reco_shw_start_z, &b_reco_shw_start_z);
   fChain->SetBranchAddress("reco.shw.end.x", reco_shw_end_x, &b_reco_shw_end_x);
   fChain->SetBranchAddress("reco.shw.end.y", reco_shw_end_y, &b_reco_shw_end_y);
   fChain->SetBranchAddress("reco.shw.end.z", reco_shw_end_z, &b_reco_shw_end_z);
   fChain->SetBranchAddress("reco.shw.cosmicDist", reco_shw_cosmicDist, &b_reco_shw_cosmicDist);
   fChain->SetBranchAddress("reco.shw.pfp.id", reco_shw_pfp_id, &b_reco_shw_pfp_id);
   fChain->SetBranchAddress("reco.shw.pfp.ndaughters", reco_shw_pfp_ndaughters, &b_reco_shw_pfp_ndaughters);
   fChain->SetBranchAddress("reco.shw.pfp.daughters", reco_shw_pfp_daughters, &b_reco_shw_pfp_daughters);
   fChain->SetBranchAddress("reco.shw.pfp.parent", reco_shw_pfp_parent, &b_reco_shw_pfp_parent);
   fChain->SetBranchAddress("reco.shw.pfp.parent_is_primary", reco_shw_pfp_parent_is_primary, &b_reco_shw_pfp_parent_is_primary);
   fChain->SetBranchAddress("reco.shw.pfp.trackScore", reco_shw_pfp_trackScore, &b_reco_shw_pfp_trackScore);
   fChain->SetBranchAddress("reco.shw.pfp.slcID", reco_shw_pfp_slcID, &b_reco_shw_pfp_slcID);
   fChain->SetBranchAddress("reco.shw.razzle.pdg", reco_shw_razzle_pdg, &b_reco_shw_razzle_pdg);
   fChain->SetBranchAddress("reco.shw.razzle.electronScore", reco_shw_razzle_electronScore, &b_reco_shw_razzle_electronScore);
   fChain->SetBranchAddress("reco.shw.razzle.photonScore", reco_shw_razzle_photonScore, &b_reco_shw_razzle_photonScore);
   fChain->SetBranchAddress("reco.shw.razzle.otherScore", reco_shw_razzle_otherScore, &b_reco_shw_razzle_otherScore);
   fChain->SetBranchAddress("reco.shw.razzle.bestScore", reco_shw_razzle_bestScore, &b_reco_shw_razzle_bestScore);
   fChain->SetBranchAddress("reco.shw.selVars.densityGradient", reco_shw_selVars_densityGradient, &b_reco_shw_selVars_densityGradient);
   fChain->SetBranchAddress("reco.shw.selVars.densityGradientPower", reco_shw_selVars_densityGradientPower, &b_reco_shw_selVars_densityGradientPower);
   fChain->SetBranchAddress("reco.shw.selVars.trackLength", reco_shw_selVars_trackLength, &b_reco_shw_selVars_trackLength);
   fChain->SetBranchAddress("reco.shw.selVars.trackWidth", reco_shw_selVars_trackWidth, &b_reco_shw_selVars_trackWidth);
   fChain->SetBranchAddress("reco.shw.selVars.showerResiduals", reco_shw_selVars_showerResiduals, &b_reco_shw_selVars_showerResiduals);
   fChain->SetBranchAddress("reco.shw.truth.total_deposited_energy", reco_shw_truth_total_deposited_energy, &b_reco_shw_truth_total_deposited_energy);
   fChain->SetBranchAddress("reco.shw.truth.nmatches", reco_shw_truth_nmatches, &b_reco_shw_truth_nmatches);
   fChain->SetBranchAddress("reco.shw.truth.bestmatch.G4ID", reco_shw_truth_bestmatch_G4ID, &b_reco_shw_truth_bestmatch_G4ID);
   fChain->SetBranchAddress("reco.shw.truth.bestmatch.energy", reco_shw_truth_bestmatch_energy, &b_reco_shw_truth_bestmatch_energy);
   fChain->SetBranchAddress("reco.shw.truth.p.plane0VisE", reco_shw_truth_p_plane0VisE, &b_reco_shw_truth_p_plane0VisE);
   fChain->SetBranchAddress("reco.shw.truth.p.plane1VisE", reco_shw_truth_p_plane1VisE, &b_reco_shw_truth_p_plane1VisE);
   fChain->SetBranchAddress("reco.shw.truth.p.plane2VisE", reco_shw_truth_p_plane2VisE, &b_reco_shw_truth_p_plane2VisE);
   fChain->SetBranchAddress("reco.shw.truth.p.genE", reco_shw_truth_p_genE, &b_reco_shw_truth_p_genE);
   fChain->SetBranchAddress("reco.shw.truth.p.startE", reco_shw_truth_p_startE, &b_reco_shw_truth_p_startE);
   fChain->SetBranchAddress("reco.shw.truth.p.endE", reco_shw_truth_p_endE, &b_reco_shw_truth_p_endE);
   fChain->SetBranchAddress("reco.shw.truth.p.genT", reco_shw_truth_p_genT, &b_reco_shw_truth_p_genT);
   fChain->SetBranchAddress("reco.shw.truth.p.startT", reco_shw_truth_p_startT, &b_reco_shw_truth_p_startT);
   fChain->SetBranchAddress("reco.shw.truth.p.endT", reco_shw_truth_p_endT, &b_reco_shw_truth_p_endT);
   fChain->SetBranchAddress("reco.shw.truth.p.length", reco_shw_truth_p_length, &b_reco_shw_truth_p_length);
   fChain->SetBranchAddress("reco.shw.truth.p.plane0nhit", reco_shw_truth_p_plane0nhit, &b_reco_shw_truth_p_plane0nhit);
   fChain->SetBranchAddress("reco.shw.truth.p.plane1nhit", reco_shw_truth_p_plane1nhit, &b_reco_shw_truth_p_plane1nhit);
   fChain->SetBranchAddress("reco.shw.truth.p.plane2nhit", reco_shw_truth_p_plane2nhit, &b_reco_shw_truth_p_plane2nhit);
   fChain->SetBranchAddress("reco.shw.truth.p.genp.x", reco_shw_truth_p_genp_x, &b_reco_shw_truth_p_genp_x);
   fChain->SetBranchAddress("reco.shw.truth.p.genp.y", reco_shw_truth_p_genp_y, &b_reco_shw_truth_p_genp_y);
   fChain->SetBranchAddress("reco.shw.truth.p.genp.z", reco_shw_truth_p_genp_z, &b_reco_shw_truth_p_genp_z);
   fChain->SetBranchAddress("reco.shw.truth.p.startp.x", reco_shw_truth_p_startp_x, &b_reco_shw_truth_p_startp_x);
   fChain->SetBranchAddress("reco.shw.truth.p.startp.y", reco_shw_truth_p_startp_y, &b_reco_shw_truth_p_startp_y);
   fChain->SetBranchAddress("reco.shw.truth.p.startp.z", reco_shw_truth_p_startp_z, &b_reco_shw_truth_p_startp_z);
   fChain->SetBranchAddress("reco.shw.truth.p.endp.x", reco_shw_truth_p_endp_x, &b_reco_shw_truth_p_endp_x);
   fChain->SetBranchAddress("reco.shw.truth.p.endp.y", reco_shw_truth_p_endp_y, &b_reco_shw_truth_p_endp_y);
   fChain->SetBranchAddress("reco.shw.truth.p.endp.z", reco_shw_truth_p_endp_z, &b_reco_shw_truth_p_endp_z);
   fChain->SetBranchAddress("reco.shw.truth.p.gen.x", reco_shw_truth_p_gen_x, &b_reco_shw_truth_p_gen_x);
   fChain->SetBranchAddress("reco.shw.truth.p.gen.y", reco_shw_truth_p_gen_y, &b_reco_shw_truth_p_gen_y);
   fChain->SetBranchAddress("reco.shw.truth.p.gen.z", reco_shw_truth_p_gen_z, &b_reco_shw_truth_p_gen_z);
   fChain->SetBranchAddress("reco.shw.truth.p.start.x", reco_shw_truth_p_start_x, &b_reco_shw_truth_p_start_x);
   fChain->SetBranchAddress("reco.shw.truth.p.start.y", reco_shw_truth_p_start_y, &b_reco_shw_truth_p_start_y);
   fChain->SetBranchAddress("reco.shw.truth.p.start.z", reco_shw_truth_p_start_z, &b_reco_shw_truth_p_start_z);
   fChain->SetBranchAddress("reco.shw.truth.p.end.x", reco_shw_truth_p_end_x, &b_reco_shw_truth_p_end_x);
   fChain->SetBranchAddress("reco.shw.truth.p.end.y", reco_shw_truth_p_end_y, &b_reco_shw_truth_p_end_y);
   fChain->SetBranchAddress("reco.shw.truth.p.end.z", reco_shw_truth_p_end_z, &b_reco_shw_truth_p_end_z);
   fChain->SetBranchAddress("reco.shw.truth.p.wallin", reco_shw_truth_p_wallin, &b_reco_shw_truth_p_wallin);
   fChain->SetBranchAddress("reco.shw.truth.p.wallout", reco_shw_truth_p_wallout, &b_reco_shw_truth_p_wallout);
   fChain->SetBranchAddress("reco.shw.truth.p.cont_tpc", reco_shw_truth_p_cont_tpc, &b_reco_shw_truth_p_cont_tpc);
   fChain->SetBranchAddress("reco.shw.truth.p.crosses_tpc", reco_shw_truth_p_crosses_tpc, &b_reco_shw_truth_p_crosses_tpc);
   fChain->SetBranchAddress("reco.shw.truth.p.contained", reco_shw_truth_p_contained, &b_reco_shw_truth_p_contained);
   fChain->SetBranchAddress("reco.shw.truth.p.pdg", reco_shw_truth_p_pdg, &b_reco_shw_truth_p_pdg);
   fChain->SetBranchAddress("reco.shw.truth.p.G4ID", reco_shw_truth_p_G4ID, &b_reco_shw_truth_p_G4ID);
   fChain->SetBranchAddress("reco.shw.truth.p.interaction_id", reco_shw_truth_p_interaction_id, &b_reco_shw_truth_p_interaction_id);
   fChain->SetBranchAddress("reco.shw.truth.p.daughters", reco_shw_truth_p_daughters, &b_reco_shw_truth_p_daughters);
   fChain->SetBranchAddress("reco.shw.truth.p.parent", reco_shw_truth_p_parent, &b_reco_shw_truth_p_parent);
   fChain->SetBranchAddress("reco.shw.truth.p.generator", reco_shw_truth_p_generator, &b_reco_shw_truth_p_generator);
   fChain->SetBranchAddress("reco.shw.truth.p.start_process", reco_shw_truth_p_start_process, &b_reco_shw_truth_p_start_process);
   fChain->SetBranchAddress("reco.shw.truth.p.end_process", reco_shw_truth_p_end_process, &b_reco_shw_truth_p_end_process);
   fChain->SetBranchAddress("reco.shw.truth.p.gstatus", reco_shw_truth_p_gstatus, &b_reco_shw_truth_p_gstatus);
   fChain->SetBranchAddress("reco.shw.producer", reco_shw_producer, &b_reco_shw_producer);
   fChain->SetBranchAddress("reco.nshw", &reco_nshw, &b_rec_reco_nshw);
   fChain->SetBranchAddress("reco.stub", &reco_stub_, &b_rec_reco_stub_);
   fChain->SetBranchAddress("reco.stub.vtx.x", reco_stub_vtx_x, &b_reco_stub_vtx_x);
   fChain->SetBranchAddress("reco.stub.vtx.y", reco_stub_vtx_y, &b_reco_stub_vtx_y);
   fChain->SetBranchAddress("reco.stub.vtx.z", reco_stub_vtx_z, &b_reco_stub_vtx_z);
   fChain->SetBranchAddress("reco.stub.end.x", reco_stub_end_x, &b_reco_stub_end_x);
   fChain->SetBranchAddress("reco.stub.end.y", reco_stub_end_y, &b_reco_stub_end_y);
   fChain->SetBranchAddress("reco.stub.end.z", reco_stub_end_z, &b_reco_stub_end_z);
   fChain->SetBranchAddress("reco.stub.efield_vtx", reco_stub_efield_vtx, &b_reco_stub_efield_vtx);
   fChain->SetBranchAddress("reco.stub.efield_end", reco_stub_efield_end, &b_reco_stub_efield_end);
   fChain->SetBranchAddress("reco.stub.pfpid", reco_stub_pfpid, &b_reco_stub_pfpid);
   fChain->SetBranchAddress("reco.stub.truth.total_deposited_energy", reco_stub_truth_total_deposited_energy, &b_reco_stub_truth_total_deposited_energy);
   fChain->SetBranchAddress("reco.stub.truth.nmatches", reco_stub_truth_nmatches, &b_reco_stub_truth_nmatches);
   fChain->SetBranchAddress("reco.stub.truth.bestmatch.G4ID", reco_stub_truth_bestmatch_G4ID, &b_reco_stub_truth_bestmatch_G4ID);
   fChain->SetBranchAddress("reco.stub.truth.bestmatch.energy", reco_stub_truth_bestmatch_energy, &b_reco_stub_truth_bestmatch_energy);
   fChain->SetBranchAddress("reco.stub.truth.p.plane0VisE", reco_stub_truth_p_plane0VisE, &b_reco_stub_truth_p_plane0VisE);
   fChain->SetBranchAddress("reco.stub.truth.p.plane1VisE", reco_stub_truth_p_plane1VisE, &b_reco_stub_truth_p_plane1VisE);
   fChain->SetBranchAddress("reco.stub.truth.p.plane2VisE", reco_stub_truth_p_plane2VisE, &b_reco_stub_truth_p_plane2VisE);
   fChain->SetBranchAddress("reco.stub.truth.p.genE", reco_stub_truth_p_genE, &b_reco_stub_truth_p_genE);
   fChain->SetBranchAddress("reco.stub.truth.p.startE", reco_stub_truth_p_startE, &b_reco_stub_truth_p_startE);
   fChain->SetBranchAddress("reco.stub.truth.p.endE", reco_stub_truth_p_endE, &b_reco_stub_truth_p_endE);
   fChain->SetBranchAddress("reco.stub.truth.p.genT", reco_stub_truth_p_genT, &b_reco_stub_truth_p_genT);
   fChain->SetBranchAddress("reco.stub.truth.p.startT", reco_stub_truth_p_startT, &b_reco_stub_truth_p_startT);
   fChain->SetBranchAddress("reco.stub.truth.p.endT", reco_stub_truth_p_endT, &b_reco_stub_truth_p_endT);
   fChain->SetBranchAddress("reco.stub.truth.p.length", reco_stub_truth_p_length, &b_reco_stub_truth_p_length);
   fChain->SetBranchAddress("reco.stub.truth.p.plane0nhit", reco_stub_truth_p_plane0nhit, &b_reco_stub_truth_p_plane0nhit);
   fChain->SetBranchAddress("reco.stub.truth.p.plane1nhit", reco_stub_truth_p_plane1nhit, &b_reco_stub_truth_p_plane1nhit);
   fChain->SetBranchAddress("reco.stub.truth.p.plane2nhit", reco_stub_truth_p_plane2nhit, &b_reco_stub_truth_p_plane2nhit);
   fChain->SetBranchAddress("reco.stub.truth.p.genp.x", reco_stub_truth_p_genp_x, &b_reco_stub_truth_p_genp_x);
   fChain->SetBranchAddress("reco.stub.truth.p.genp.y", reco_stub_truth_p_genp_y, &b_reco_stub_truth_p_genp_y);
   fChain->SetBranchAddress("reco.stub.truth.p.genp.z", reco_stub_truth_p_genp_z, &b_reco_stub_truth_p_genp_z);
   fChain->SetBranchAddress("reco.stub.truth.p.startp.x", reco_stub_truth_p_startp_x, &b_reco_stub_truth_p_startp_x);
   fChain->SetBranchAddress("reco.stub.truth.p.startp.y", reco_stub_truth_p_startp_y, &b_reco_stub_truth_p_startp_y);
   fChain->SetBranchAddress("reco.stub.truth.p.startp.z", reco_stub_truth_p_startp_z, &b_reco_stub_truth_p_startp_z);
   fChain->SetBranchAddress("reco.stub.truth.p.endp.x", reco_stub_truth_p_endp_x, &b_reco_stub_truth_p_endp_x);
   fChain->SetBranchAddress("reco.stub.truth.p.endp.y", reco_stub_truth_p_endp_y, &b_reco_stub_truth_p_endp_y);
   fChain->SetBranchAddress("reco.stub.truth.p.endp.z", reco_stub_truth_p_endp_z, &b_reco_stub_truth_p_endp_z);
   fChain->SetBranchAddress("reco.stub.truth.p.gen.x", reco_stub_truth_p_gen_x, &b_reco_stub_truth_p_gen_x);
   fChain->SetBranchAddress("reco.stub.truth.p.gen.y", reco_stub_truth_p_gen_y, &b_reco_stub_truth_p_gen_y);
   fChain->SetBranchAddress("reco.stub.truth.p.gen.z", reco_stub_truth_p_gen_z, &b_reco_stub_truth_p_gen_z);
   fChain->SetBranchAddress("reco.stub.truth.p.start.x", reco_stub_truth_p_start_x, &b_reco_stub_truth_p_start_x);
   fChain->SetBranchAddress("reco.stub.truth.p.start.y", reco_stub_truth_p_start_y, &b_reco_stub_truth_p_start_y);
   fChain->SetBranchAddress("reco.stub.truth.p.start.z", reco_stub_truth_p_start_z, &b_reco_stub_truth_p_start_z);
   fChain->SetBranchAddress("reco.stub.truth.p.end.x", reco_stub_truth_p_end_x, &b_reco_stub_truth_p_end_x);
   fChain->SetBranchAddress("reco.stub.truth.p.end.y", reco_stub_truth_p_end_y, &b_reco_stub_truth_p_end_y);
   fChain->SetBranchAddress("reco.stub.truth.p.end.z", reco_stub_truth_p_end_z, &b_reco_stub_truth_p_end_z);
   fChain->SetBranchAddress("reco.stub.truth.p.wallin", reco_stub_truth_p_wallin, &b_reco_stub_truth_p_wallin);
   fChain->SetBranchAddress("reco.stub.truth.p.wallout", reco_stub_truth_p_wallout, &b_reco_stub_truth_p_wallout);
   fChain->SetBranchAddress("reco.stub.truth.p.cont_tpc", reco_stub_truth_p_cont_tpc, &b_reco_stub_truth_p_cont_tpc);
   fChain->SetBranchAddress("reco.stub.truth.p.crosses_tpc", reco_stub_truth_p_crosses_tpc, &b_reco_stub_truth_p_crosses_tpc);
   fChain->SetBranchAddress("reco.stub.truth.p.contained", reco_stub_truth_p_contained, &b_reco_stub_truth_p_contained);
   fChain->SetBranchAddress("reco.stub.truth.p.pdg", reco_stub_truth_p_pdg, &b_reco_stub_truth_p_pdg);
   fChain->SetBranchAddress("reco.stub.truth.p.G4ID", reco_stub_truth_p_G4ID, &b_reco_stub_truth_p_G4ID);
   fChain->SetBranchAddress("reco.stub.truth.p.interaction_id", reco_stub_truth_p_interaction_id, &b_reco_stub_truth_p_interaction_id);
   fChain->SetBranchAddress("reco.stub.truth.p.daughters", reco_stub_truth_p_daughters, &b_reco_stub_truth_p_daughters);
   fChain->SetBranchAddress("reco.stub.truth.p.parent", reco_stub_truth_p_parent, &b_reco_stub_truth_p_parent);
   fChain->SetBranchAddress("reco.stub.truth.p.generator", reco_stub_truth_p_generator, &b_reco_stub_truth_p_generator);
   fChain->SetBranchAddress("reco.stub.truth.p.start_process", reco_stub_truth_p_start_process, &b_reco_stub_truth_p_start_process);
   fChain->SetBranchAddress("reco.stub.truth.p.end_process", reco_stub_truth_p_end_process, &b_reco_stub_truth_p_end_process);
   fChain->SetBranchAddress("reco.stub.truth.p.gstatus", reco_stub_truth_p_gstatus, &b_reco_stub_truth_p_gstatus);
   fChain->SetBranchAddress("reco.nstub", &reco_nstub, &b_rec_reco_nstub);
   fChain->SetBranchAddress("mc.nu", &mc_nu_, &b_rec_mc_nu_);
   fChain->SetBranchAddress("mc.nu.initpdg", mc_nu_initpdg, &b_mc_nu_initpdg);
   fChain->SetBranchAddress("mc.nu.pdg", mc_nu_pdg, &b_mc_nu_pdg);
   fChain->SetBranchAddress("mc.nu.inttype", mc_nu_inttype, &b_mc_nu_inttype);
   fChain->SetBranchAddress("mc.nu.index", mc_nu_index, &b_mc_nu_index);
   fChain->SetBranchAddress("mc.nu.targetPDG", mc_nu_targetPDG, &b_mc_nu_targetPDG);
   fChain->SetBranchAddress("mc.nu.hitnuc", mc_nu_hitnuc, &b_mc_nu_hitnuc);
   fChain->SetBranchAddress("mc.nu.genie_intcode", mc_nu_genie_intcode, &b_mc_nu_genie_intcode);
   fChain->SetBranchAddress("mc.nu.isnc", mc_nu_isnc, &b_mc_nu_isnc);
   fChain->SetBranchAddress("mc.nu.iscc", mc_nu_iscc, &b_mc_nu_iscc);
   fChain->SetBranchAddress("mc.nu.isvtxcont", mc_nu_isvtxcont, &b_mc_nu_isvtxcont);
   fChain->SetBranchAddress("mc.nu.is_numucc_primary", mc_nu_is_numucc_primary, &b_mc_nu_is_numucc_primary);
   fChain->SetBranchAddress("mc.nu.E", mc_nu_E, &b_mc_nu_E);
   fChain->SetBranchAddress("mc.nu.plane0VisE", mc_nu_plane0VisE, &b_mc_nu_plane0VisE);
   fChain->SetBranchAddress("mc.nu.plane1VisE", mc_nu_plane1VisE, &b_mc_nu_plane1VisE);
   fChain->SetBranchAddress("mc.nu.plane2VisE", mc_nu_plane2VisE, &b_mc_nu_plane2VisE);
   fChain->SetBranchAddress("mc.nu.time", mc_nu_time, &b_mc_nu_time);
   fChain->SetBranchAddress("mc.nu.bjorkenX", mc_nu_bjorkenX, &b_mc_nu_bjorkenX);
   fChain->SetBranchAddress("mc.nu.inelasticityY", mc_nu_inelasticityY, &b_mc_nu_inelasticityY);
   fChain->SetBranchAddress("mc.nu.Q2", mc_nu_Q2, &b_mc_nu_Q2);
   fChain->SetBranchAddress("mc.nu.q0", mc_nu_q0, &b_mc_nu_q0);
   fChain->SetBranchAddress("mc.nu.modq", mc_nu_modq, &b_mc_nu_modq);
   fChain->SetBranchAddress("mc.nu.q0_lab", mc_nu_q0_lab, &b_mc_nu_q0_lab);
   fChain->SetBranchAddress("mc.nu.modq_lab", mc_nu_modq_lab, &b_mc_nu_modq_lab);
   fChain->SetBranchAddress("mc.nu.w", mc_nu_w, &b_mc_nu_w);
   fChain->SetBranchAddress("mc.nu.t", mc_nu_t, &b_mc_nu_t);
   fChain->SetBranchAddress("mc.nu.eccqe", mc_nu_eccqe, &b_mc_nu_eccqe);
   fChain->SetBranchAddress("mc.nu.baseline", mc_nu_baseline, &b_mc_nu_baseline);
   fChain->SetBranchAddress("mc.nu.npiplus", mc_nu_npiplus, &b_mc_nu_npiplus);
   fChain->SetBranchAddress("mc.nu.npiminus", mc_nu_npiminus, &b_mc_nu_npiminus);
   fChain->SetBranchAddress("mc.nu.npizero", mc_nu_npizero, &b_mc_nu_npizero);
   fChain->SetBranchAddress("mc.nu.nproton", mc_nu_nproton, &b_mc_nu_nproton);
   fChain->SetBranchAddress("mc.nu.nneutron", mc_nu_nneutron, &b_mc_nu_nneutron);
   fChain->SetBranchAddress("mc.nu.ischarm", mc_nu_ischarm, &b_mc_nu_ischarm);
   fChain->SetBranchAddress("mc.nu.isseaquark", mc_nu_isseaquark, &b_mc_nu_isseaquark);
   fChain->SetBranchAddress("mc.nu.resnum", mc_nu_resnum, &b_mc_nu_resnum);
   fChain->SetBranchAddress("mc.nu.xsec", mc_nu_xsec, &b_mc_nu_xsec);
   fChain->SetBranchAddress("mc.nu.genweight", mc_nu_genweight, &b_mc_nu_genweight);
   fChain->SetBranchAddress("mc.nu.plane0nhitprim", mc_nu_plane0nhitprim, &b_mc_nu_plane0nhitprim);
   fChain->SetBranchAddress("mc.nu.plane1nhitprim", mc_nu_plane1nhitprim, &b_mc_nu_plane1nhitprim);
   fChain->SetBranchAddress("mc.nu.plane2nhitprim", mc_nu_plane2nhitprim, &b_mc_nu_plane2nhitprim);
   fChain->SetBranchAddress("mc.nu.plane0nhit", mc_nu_plane0nhit, &b_mc_nu_plane0nhit);
   fChain->SetBranchAddress("mc.nu.plane1nhit", mc_nu_plane1nhit, &b_mc_nu_plane1nhit);
   fChain->SetBranchAddress("mc.nu.plane2nhit", mc_nu_plane2nhit, &b_mc_nu_plane2nhit);
   fChain->SetBranchAddress("mc.nu.parent_dcy_mode", mc_nu_parent_dcy_mode, &b_mc_nu_parent_dcy_mode);
   fChain->SetBranchAddress("mc.nu.parent_pdg", mc_nu_parent_pdg, &b_mc_nu_parent_pdg);
   fChain->SetBranchAddress("mc.nu.prod_vtx.x", mc_nu_prod_vtx_x, &b_mc_nu_prod_vtx_x);
   fChain->SetBranchAddress("mc.nu.prod_vtx.y", mc_nu_prod_vtx_y, &b_mc_nu_prod_vtx_y);
   fChain->SetBranchAddress("mc.nu.prod_vtx.z", mc_nu_prod_vtx_z, &b_mc_nu_prod_vtx_z);
   fChain->SetBranchAddress("mc.nu.parent_dcy_mom.x", mc_nu_parent_dcy_mom_x, &b_mc_nu_parent_dcy_mom_x);
   fChain->SetBranchAddress("mc.nu.parent_dcy_mom.y", mc_nu_parent_dcy_mom_y, &b_mc_nu_parent_dcy_mom_y);
   fChain->SetBranchAddress("mc.nu.parent_dcy_mom.z", mc_nu_parent_dcy_mom_z, &b_mc_nu_parent_dcy_mom_z);
   fChain->SetBranchAddress("mc.nu.parent_dcy_E", mc_nu_parent_dcy_E, &b_mc_nu_parent_dcy_E);
   fChain->SetBranchAddress("mc.nu.imp_weight", mc_nu_imp_weight, &b_mc_nu_imp_weight);
   fChain->SetBranchAddress("mc.nu.vtx.x", mc_nu_vtx_x, &b_mc_nu_vtx_x);
   fChain->SetBranchAddress("mc.nu.vtx.y", mc_nu_vtx_y, &b_mc_nu_vtx_y);
   fChain->SetBranchAddress("mc.nu.vtx.z", mc_nu_vtx_z, &b_mc_nu_vtx_z);
   fChain->SetBranchAddress("mc.nu.momentum.x", mc_nu_momentum_x, &b_mc_nu_momentum_x);
   fChain->SetBranchAddress("mc.nu.momentum.y", mc_nu_momentum_y, &b_mc_nu_momentum_y);
   fChain->SetBranchAddress("mc.nu.momentum.z", mc_nu_momentum_z, &b_mc_nu_momentum_z);
   fChain->SetBranchAddress("mc.nu.position.x", mc_nu_position_x, &b_mc_nu_position_x);
   fChain->SetBranchAddress("mc.nu.position.y", mc_nu_position_y, &b_mc_nu_position_y);
   fChain->SetBranchAddress("mc.nu.position.z", mc_nu_position_z, &b_mc_nu_position_z);
   fChain->SetBranchAddress("mc.nu.det", mc_nu_det, &b_mc_nu_det);
   fChain->SetBranchAddress("mc.nu.mode", mc_nu_mode, &b_mc_nu_mode);
   fChain->SetBranchAddress("mc.nu.generator", mc_nu_generator, &b_mc_nu_generator);
   fChain->SetBranchAddress("mc.nu.genVersion", mc_nu_genVersion, &b_mc_nu_genVersion);
   fChain->SetBranchAddress("mc.nu.nprim", mc_nu_nprim, &b_mc_nu_nprim);
   fChain->SetBranchAddress("mc.nnu", &mc_nnu, &b_rec_mc_nnu);
   fChain->SetBranchAddress("mc.prtl", &mc_prtl_, &b_rec_mc_prtl_);
   fChain->SetBranchAddress("mc.prtl.gen", &mc_prtl_gen, &b_mc_prtl_gen);
   fChain->SetBranchAddress("mc.prtl.dcy.x", &mc_prtl_dcy_x, &b_mc_prtl_dcy_x);
   fChain->SetBranchAddress("mc.prtl.dcy.y", &mc_prtl_dcy_y, &b_mc_prtl_dcy_y);
   fChain->SetBranchAddress("mc.prtl.dcy.z", &mc_prtl_dcy_z, &b_mc_prtl_dcy_z);
   fChain->SetBranchAddress("mc.prtl.dcyT", &mc_prtl_dcyT, &b_mc_prtl_dcyT);
   fChain->SetBranchAddress("mc.prtl.mom.x", &mc_prtl_mom_x, &b_mc_prtl_mom_x);
   fChain->SetBranchAddress("mc.prtl.mom.y", &mc_prtl_mom_y, &b_mc_prtl_mom_y);
   fChain->SetBranchAddress("mc.prtl.mom.z", &mc_prtl_mom_z, &b_mc_prtl_mom_z);
   fChain->SetBranchAddress("mc.prtl.E", &mc_prtl_E, &b_mc_prtl_E);
   fChain->SetBranchAddress("mc.prtl.M", &mc_prtl_M, &b_mc_prtl_M);
   fChain->SetBranchAddress("mc.prtl.flux_weight", &mc_prtl_flux_weight, &b_mc_prtl_flux_weight);
   fChain->SetBranchAddress("mc.prtl.ray_weight", &mc_prtl_ray_weight, &b_mc_prtl_ray_weight);
   fChain->SetBranchAddress("mc.prtl.decay_weight", &mc_prtl_decay_weight, &b_mc_prtl_decay_weight);
   fChain->SetBranchAddress("mc.prtl.C1", &mc_prtl_C1, &b_mc_prtl_C1);
   fChain->SetBranchAddress("mc.prtl.C2", &mc_prtl_C2, &b_mc_prtl_C2);
   fChain->SetBranchAddress("mc.prtl.C3", &mc_prtl_C3, &b_mc_prtl_C3);
   fChain->SetBranchAddress("mc.prtl.C4", &mc_prtl_C4, &b_mc_prtl_C4);
   fChain->SetBranchAddress("mc.prtl.C5", &mc_prtl_C5, &b_mc_prtl_C5);
   fChain->SetBranchAddress("mc.nprtl", &mc_nprtl, &b_rec_mc_nprtl);
   fChain->SetBranchAddress("nslc", &nslc, &b_rec_nslc);
   fChain->SetBranchAddress("slc", &slc_, &b_rec_slc_);
   fChain->SetBranchAddress("slc.producer", slc_producer, &b_slc_producer);
   fChain->SetBranchAddress("slc.charge", slc_charge, &b_slc_charge);
   fChain->SetBranchAddress("slc.vertex.x", slc_vertex_x, &b_slc_vertex_x);
   fChain->SetBranchAddress("slc.vertex.y", slc_vertex_y, &b_slc_vertex_y);
   fChain->SetBranchAddress("slc.vertex.z", slc_vertex_z, &b_slc_vertex_z);
   fChain->SetBranchAddress("slc.truth.initpdg", slc_truth_initpdg, &b_slc_truth_initpdg);
   fChain->SetBranchAddress("slc.truth.pdg", slc_truth_pdg, &b_slc_truth_pdg);
   fChain->SetBranchAddress("slc.truth.inttype", slc_truth_inttype, &b_slc_truth_inttype);
   fChain->SetBranchAddress("slc.truth.index", slc_truth_index, &b_slc_truth_index);
   fChain->SetBranchAddress("slc.truth.targetPDG", slc_truth_targetPDG, &b_slc_truth_targetPDG);
   fChain->SetBranchAddress("slc.truth.hitnuc", slc_truth_hitnuc, &b_slc_truth_hitnuc);
   fChain->SetBranchAddress("slc.truth.genie_intcode", slc_truth_genie_intcode, &b_slc_truth_genie_intcode);
   fChain->SetBranchAddress("slc.truth.isnc", slc_truth_isnc, &b_slc_truth_isnc);
   fChain->SetBranchAddress("slc.truth.iscc", slc_truth_iscc, &b_slc_truth_iscc);
   fChain->SetBranchAddress("slc.truth.isvtxcont", slc_truth_isvtxcont, &b_slc_truth_isvtxcont);
   fChain->SetBranchAddress("slc.truth.is_numucc_primary", slc_truth_is_numucc_primary, &b_slc_truth_is_numucc_primary);
   fChain->SetBranchAddress("slc.truth.E", slc_truth_E, &b_slc_truth_E);
   fChain->SetBranchAddress("slc.truth.plane0VisE", slc_truth_plane0VisE, &b_slc_truth_plane0VisE);
   fChain->SetBranchAddress("slc.truth.plane1VisE", slc_truth_plane1VisE, &b_slc_truth_plane1VisE);
   fChain->SetBranchAddress("slc.truth.plane2VisE", slc_truth_plane2VisE, &b_slc_truth_plane2VisE);
   fChain->SetBranchAddress("slc.truth.time", slc_truth_time, &b_slc_truth_time);
   fChain->SetBranchAddress("slc.truth.bjorkenX", slc_truth_bjorkenX, &b_slc_truth_bjorkenX);
   fChain->SetBranchAddress("slc.truth.inelasticityY", slc_truth_inelasticityY, &b_slc_truth_inelasticityY);
   fChain->SetBranchAddress("slc.truth.Q2", slc_truth_Q2, &b_slc_truth_Q2);
   fChain->SetBranchAddress("slc.truth.q0", slc_truth_q0, &b_slc_truth_q0);
   fChain->SetBranchAddress("slc.truth.modq", slc_truth_modq, &b_slc_truth_modq);
   fChain->SetBranchAddress("slc.truth.q0_lab", slc_truth_q0_lab, &b_slc_truth_q0_lab);
   fChain->SetBranchAddress("slc.truth.modq_lab", slc_truth_modq_lab, &b_slc_truth_modq_lab);
   fChain->SetBranchAddress("slc.truth.w", slc_truth_w, &b_slc_truth_w);
   fChain->SetBranchAddress("slc.truth.t", slc_truth_t, &b_slc_truth_t);
   fChain->SetBranchAddress("slc.truth.eccqe", slc_truth_eccqe, &b_slc_truth_eccqe);
   fChain->SetBranchAddress("slc.truth.baseline", slc_truth_baseline, &b_slc_truth_baseline);
   fChain->SetBranchAddress("slc.truth.npiplus", slc_truth_npiplus, &b_slc_truth_npiplus);
   fChain->SetBranchAddress("slc.truth.npiminus", slc_truth_npiminus, &b_slc_truth_npiminus);
   fChain->SetBranchAddress("slc.truth.npizero", slc_truth_npizero, &b_slc_truth_npizero);
   fChain->SetBranchAddress("slc.truth.nproton", slc_truth_nproton, &b_slc_truth_nproton);
   fChain->SetBranchAddress("slc.truth.nneutron", slc_truth_nneutron, &b_slc_truth_nneutron);
   fChain->SetBranchAddress("slc.truth.ischarm", slc_truth_ischarm, &b_slc_truth_ischarm);
   fChain->SetBranchAddress("slc.truth.isseaquark", slc_truth_isseaquark, &b_slc_truth_isseaquark);
   fChain->SetBranchAddress("slc.truth.resnum", slc_truth_resnum, &b_slc_truth_resnum);
   fChain->SetBranchAddress("slc.truth.xsec", slc_truth_xsec, &b_slc_truth_xsec);
   fChain->SetBranchAddress("slc.truth.genweight", slc_truth_genweight, &b_slc_truth_genweight);
   fChain->SetBranchAddress("slc.truth.plane0nhitprim", slc_truth_plane0nhitprim, &b_slc_truth_plane0nhitprim);
   fChain->SetBranchAddress("slc.truth.plane1nhitprim", slc_truth_plane1nhitprim, &b_slc_truth_plane1nhitprim);
   fChain->SetBranchAddress("slc.truth.plane2nhitprim", slc_truth_plane2nhitprim, &b_slc_truth_plane2nhitprim);
   fChain->SetBranchAddress("slc.truth.plane0nhit", slc_truth_plane0nhit, &b_slc_truth_plane0nhit);
   fChain->SetBranchAddress("slc.truth.plane1nhit", slc_truth_plane1nhit, &b_slc_truth_plane1nhit);
   fChain->SetBranchAddress("slc.truth.plane2nhit", slc_truth_plane2nhit, &b_slc_truth_plane2nhit);
   fChain->SetBranchAddress("slc.truth.parent_dcy_mode", slc_truth_parent_dcy_mode, &b_slc_truth_parent_dcy_mode);
   fChain->SetBranchAddress("slc.truth.parent_pdg", slc_truth_parent_pdg, &b_slc_truth_parent_pdg);
   fChain->SetBranchAddress("slc.truth.prod_vtx.x", slc_truth_prod_vtx_x, &b_slc_truth_prod_vtx_x);
   fChain->SetBranchAddress("slc.truth.prod_vtx.y", slc_truth_prod_vtx_y, &b_slc_truth_prod_vtx_y);
   fChain->SetBranchAddress("slc.truth.prod_vtx.z", slc_truth_prod_vtx_z, &b_slc_truth_prod_vtx_z);
   fChain->SetBranchAddress("slc.truth.parent_dcy_mom.x", slc_truth_parent_dcy_mom_x, &b_slc_truth_parent_dcy_mom_x);
   fChain->SetBranchAddress("slc.truth.parent_dcy_mom.y", slc_truth_parent_dcy_mom_y, &b_slc_truth_parent_dcy_mom_y);
   fChain->SetBranchAddress("slc.truth.parent_dcy_mom.z", slc_truth_parent_dcy_mom_z, &b_slc_truth_parent_dcy_mom_z);
   fChain->SetBranchAddress("slc.truth.parent_dcy_E", slc_truth_parent_dcy_E, &b_slc_truth_parent_dcy_E);
   fChain->SetBranchAddress("slc.truth.imp_weight", slc_truth_imp_weight, &b_slc_truth_imp_weight);
   fChain->SetBranchAddress("slc.truth.vtx.x", slc_truth_vtx_x, &b_slc_truth_vtx_x);
   fChain->SetBranchAddress("slc.truth.vtx.y", slc_truth_vtx_y, &b_slc_truth_vtx_y);
   fChain->SetBranchAddress("slc.truth.vtx.z", slc_truth_vtx_z, &b_slc_truth_vtx_z);
   fChain->SetBranchAddress("slc.truth.momentum.x", slc_truth_momentum_x, &b_slc_truth_momentum_x);
   fChain->SetBranchAddress("slc.truth.momentum.y", slc_truth_momentum_y, &b_slc_truth_momentum_y);
   fChain->SetBranchAddress("slc.truth.momentum.z", slc_truth_momentum_z, &b_slc_truth_momentum_z);
   fChain->SetBranchAddress("slc.truth.position.x", slc_truth_position_x, &b_slc_truth_position_x);
   fChain->SetBranchAddress("slc.truth.position.y", slc_truth_position_y, &b_slc_truth_position_y);
   fChain->SetBranchAddress("slc.truth.position.z", slc_truth_position_z, &b_slc_truth_position_z);
   fChain->SetBranchAddress("slc.truth.det", slc_truth_det, &b_slc_truth_det);
   fChain->SetBranchAddress("slc.truth.mode", slc_truth_mode, &b_slc_truth_mode);
   fChain->SetBranchAddress("slc.truth.generator", slc_truth_generator, &b_slc_truth_generator);
   fChain->SetBranchAddress("slc.truth.genVersion", slc_truth_genVersion, &b_slc_truth_genVersion);
   fChain->SetBranchAddress("slc.truth.nprim", slc_truth_nprim, &b_slc_truth_nprim);
   fChain->SetBranchAddress("slc.tmatch.eff", slc_tmatch_eff, &b_slc_tmatch_eff);
   fChain->SetBranchAddress("slc.tmatch.pur", slc_tmatch_pur, &b_slc_tmatch_pur);
   fChain->SetBranchAddress("slc.tmatch.visEinslc", slc_tmatch_visEinslc, &b_slc_tmatch_visEinslc);
   fChain->SetBranchAddress("slc.tmatch.visEcosmic", slc_tmatch_visEcosmic, &b_slc_tmatch_visEcosmic);
   fChain->SetBranchAddress("slc.tmatch.index", slc_tmatch_index, &b_slc_tmatch_index);
   fChain->SetBranchAddress("slc.fmatch.present", slc_fmatch_present, &b_slc_fmatch_present);
   fChain->SetBranchAddress("slc.fmatch.time", slc_fmatch_time, &b_slc_fmatch_time);
   fChain->SetBranchAddress("slc.fmatch.chargeQ", slc_fmatch_chargeQ, &b_slc_fmatch_chargeQ);
   fChain->SetBranchAddress("slc.fmatch.chargeCenter.x", slc_fmatch_chargeCenter_x, &b_slc_fmatch_chargeCenter_x);
   fChain->SetBranchAddress("slc.fmatch.chargeCenter.y", slc_fmatch_chargeCenter_y, &b_slc_fmatch_chargeCenter_y);
   fChain->SetBranchAddress("slc.fmatch.chargeCenter.z", slc_fmatch_chargeCenter_z, &b_slc_fmatch_chargeCenter_z);
   fChain->SetBranchAddress("slc.fmatch.lightPE", slc_fmatch_lightPE, &b_slc_fmatch_lightPE);
   fChain->SetBranchAddress("slc.fmatch.lightCenter.x", slc_fmatch_lightCenter_x, &b_slc_fmatch_lightCenter_x);
   fChain->SetBranchAddress("slc.fmatch.lightCenter.y", slc_fmatch_lightCenter_y, &b_slc_fmatch_lightCenter_y);
   fChain->SetBranchAddress("slc.fmatch.lightCenter.z", slc_fmatch_lightCenter_z, &b_slc_fmatch_lightCenter_z);
   fChain->SetBranchAddress("slc.fmatch.score", slc_fmatch_score, &b_slc_fmatch_score);
   fChain->SetBranchAddress("slc.fmatch.scoreY", slc_fmatch_scoreY, &b_slc_fmatch_scoreY);
   fChain->SetBranchAddress("slc.fmatch.scoreZ", slc_fmatch_scoreZ, &b_slc_fmatch_scoreZ);
   fChain->SetBranchAddress("slc.fmatch.scoreRR", slc_fmatch_scoreRR, &b_slc_fmatch_scoreRR);
   fChain->SetBranchAddress("slc.fmatch.scoreRatio", slc_fmatch_scoreRatio, &b_slc_fmatch_scoreRatio);
   fChain->SetBranchAddress("slc.fmatch_a.present", slc_fmatch_a_present, &b_slc_fmatch_a_present);
   fChain->SetBranchAddress("slc.fmatch_a.time", slc_fmatch_a_time, &b_slc_fmatch_a_time);
   fChain->SetBranchAddress("slc.fmatch_a.chargeQ", slc_fmatch_a_chargeQ, &b_slc_fmatch_a_chargeQ);
   fChain->SetBranchAddress("slc.fmatch_a.chargeCenter.x", slc_fmatch_a_chargeCenter_x, &b_slc_fmatch_a_chargeCenter_x);
   fChain->SetBranchAddress("slc.fmatch_a.chargeCenter.y", slc_fmatch_a_chargeCenter_y, &b_slc_fmatch_a_chargeCenter_y);
   fChain->SetBranchAddress("slc.fmatch_a.chargeCenter.z", slc_fmatch_a_chargeCenter_z, &b_slc_fmatch_a_chargeCenter_z);
   fChain->SetBranchAddress("slc.fmatch_a.lightPE", slc_fmatch_a_lightPE, &b_slc_fmatch_a_lightPE);
   fChain->SetBranchAddress("slc.fmatch_a.lightCenter.x", slc_fmatch_a_lightCenter_x, &b_slc_fmatch_a_lightCenter_x);
   fChain->SetBranchAddress("slc.fmatch_a.lightCenter.y", slc_fmatch_a_lightCenter_y, &b_slc_fmatch_a_lightCenter_y);
   fChain->SetBranchAddress("slc.fmatch_a.lightCenter.z", slc_fmatch_a_lightCenter_z, &b_slc_fmatch_a_lightCenter_z);
   fChain->SetBranchAddress("slc.fmatch_a.score", slc_fmatch_a_score, &b_slc_fmatch_a_score);
   fChain->SetBranchAddress("slc.fmatch_a.scoreY", slc_fmatch_a_scoreY, &b_slc_fmatch_a_scoreY);
   fChain->SetBranchAddress("slc.fmatch_a.scoreZ", slc_fmatch_a_scoreZ, &b_slc_fmatch_a_scoreZ);
   fChain->SetBranchAddress("slc.fmatch_a.scoreRR", slc_fmatch_a_scoreRR, &b_slc_fmatch_a_scoreRR);
   fChain->SetBranchAddress("slc.fmatch_a.scoreRatio", slc_fmatch_a_scoreRatio, &b_slc_fmatch_a_scoreRatio);
   fChain->SetBranchAddress("slc.fmatch_b.present", slc_fmatch_b_present, &b_slc_fmatch_b_present);
   fChain->SetBranchAddress("slc.fmatch_b.time", slc_fmatch_b_time, &b_slc_fmatch_b_time);
   fChain->SetBranchAddress("slc.fmatch_b.chargeQ", slc_fmatch_b_chargeQ, &b_slc_fmatch_b_chargeQ);
   fChain->SetBranchAddress("slc.fmatch_b.chargeCenter.x", slc_fmatch_b_chargeCenter_x, &b_slc_fmatch_b_chargeCenter_x);
   fChain->SetBranchAddress("slc.fmatch_b.chargeCenter.y", slc_fmatch_b_chargeCenter_y, &b_slc_fmatch_b_chargeCenter_y);
   fChain->SetBranchAddress("slc.fmatch_b.chargeCenter.z", slc_fmatch_b_chargeCenter_z, &b_slc_fmatch_b_chargeCenter_z);
   fChain->SetBranchAddress("slc.fmatch_b.lightPE", slc_fmatch_b_lightPE, &b_slc_fmatch_b_lightPE);
   fChain->SetBranchAddress("slc.fmatch_b.lightCenter.x", slc_fmatch_b_lightCenter_x, &b_slc_fmatch_b_lightCenter_x);
   fChain->SetBranchAddress("slc.fmatch_b.lightCenter.y", slc_fmatch_b_lightCenter_y, &b_slc_fmatch_b_lightCenter_y);
   fChain->SetBranchAddress("slc.fmatch_b.lightCenter.z", slc_fmatch_b_lightCenter_z, &b_slc_fmatch_b_lightCenter_z);
   fChain->SetBranchAddress("slc.fmatch_b.score", slc_fmatch_b_score, &b_slc_fmatch_b_score);
   fChain->SetBranchAddress("slc.fmatch_b.scoreY", slc_fmatch_b_scoreY, &b_slc_fmatch_b_scoreY);
   fChain->SetBranchAddress("slc.fmatch_b.scoreZ", slc_fmatch_b_scoreZ, &b_slc_fmatch_b_scoreZ);
   fChain->SetBranchAddress("slc.fmatch_b.scoreRR", slc_fmatch_b_scoreRR, &b_slc_fmatch_b_scoreRR);
   fChain->SetBranchAddress("slc.fmatch_b.scoreRatio", slc_fmatch_b_scoreRatio, &b_slc_fmatch_b_scoreRatio);
   fChain->SetBranchAddress("slc.fake_reco.nuE", slc_fake_reco_nuE, &b_slc_fake_reco_nuE);
   fChain->SetBranchAddress("slc.fake_reco.vtx.x", slc_fake_reco_vtx_x, &b_slc_fake_reco_vtx_x);
   fChain->SetBranchAddress("slc.fake_reco.vtx.y", slc_fake_reco_vtx_y, &b_slc_fake_reco_vtx_y);
   fChain->SetBranchAddress("slc.fake_reco.vtx.z", slc_fake_reco_vtx_z, &b_slc_fake_reco_vtx_z);
   fChain->SetBranchAddress("slc.fake_reco.lepton.ke", slc_fake_reco_lepton_ke, &b_slc_fake_reco_lepton_ke);
   fChain->SetBranchAddress("slc.fake_reco.lepton.costh", slc_fake_reco_lepton_costh, &b_slc_fake_reco_lepton_costh);
   fChain->SetBranchAddress("slc.fake_reco.lepton.len", slc_fake_reco_lepton_len, &b_slc_fake_reco_lepton_len);
   fChain->SetBranchAddress("slc.fake_reco.lepton.pid", slc_fake_reco_lepton_pid, &b_slc_fake_reco_lepton_pid);
   fChain->SetBranchAddress("slc.fake_reco.lepton.contained", slc_fake_reco_lepton_contained, &b_slc_fake_reco_lepton_contained);
   fChain->SetBranchAddress("slc.fake_reco.nhad", slc_fake_reco_nhad, &b_slc_fake_reco_nhad);
   fChain->SetBranchAddress("slc.fake_reco.wgt", slc_fake_reco_wgt, &b_slc_fake_reco_wgt);
   fChain->SetBranchAddress("slc.fake_reco.filled", slc_fake_reco_filled, &b_slc_fake_reco_filled);
   fChain->SetBranchAddress("slc.is_clear_cosmic", slc_is_clear_cosmic, &b_slc_is_clear_cosmic);
   fChain->SetBranchAddress("slc.nu_pdg", slc_nu_pdg, &b_slc_nu_pdg);
   fChain->SetBranchAddress("slc.nu_score", slc_nu_score, &b_slc_nu_score);
   fChain->SetBranchAddress("slc.primary", slc_primary, &b_slc_primary);
   fChain->SetBranchAddress("slc.self", slc_self, &b_slc_self);
   fChain->SetBranchAddress("slc.reco.ntrk", slc_reco_ntrk, &b_slc_reco_ntrk);
   fChain->SetBranchAddress("slc.reco.nshw", slc_reco_nshw, &b_slc_reco_nshw);
   fChain->SetBranchAddress("slc.reco.nstub", slc_reco_nstub, &b_slc_reco_nstub);
   fChain->SetBranchAddress("nfake_reco", &nfake_reco, &b_rec_nfake_reco);
   fChain->SetBranchAddress("fake_reco", &fake_reco_, &b_rec_fake_reco_);
   fChain->SetBranchAddress("fake_reco.nuE", fake_reco_nuE, &b_fake_reco_nuE);
   fChain->SetBranchAddress("fake_reco.vtx.x", fake_reco_vtx_x, &b_fake_reco_vtx_x);
   fChain->SetBranchAddress("fake_reco.vtx.y", fake_reco_vtx_y, &b_fake_reco_vtx_y);
   fChain->SetBranchAddress("fake_reco.vtx.z", fake_reco_vtx_z, &b_fake_reco_vtx_z);
   fChain->SetBranchAddress("fake_reco.lepton.ke", fake_reco_lepton_ke, &b_fake_reco_lepton_ke);
   fChain->SetBranchAddress("fake_reco.lepton.costh", fake_reco_lepton_costh, &b_fake_reco_lepton_costh);
   fChain->SetBranchAddress("fake_reco.lepton.len", fake_reco_lepton_len, &b_fake_reco_lepton_len);
   fChain->SetBranchAddress("fake_reco.lepton.pid", fake_reco_lepton_pid, &b_fake_reco_lepton_pid);
   fChain->SetBranchAddress("fake_reco.lepton.contained", fake_reco_lepton_contained, &b_fake_reco_lepton_contained);
   fChain->SetBranchAddress("fake_reco.nhad", fake_reco_nhad, &b_fake_reco_nhad);
   fChain->SetBranchAddress("fake_reco.wgt", fake_reco_wgt, &b_fake_reco_wgt);
   fChain->SetBranchAddress("fake_reco.filled", fake_reco_filled, &b_fake_reco_filled);
   fChain->SetBranchAddress("ntrue_particles", &ntrue_particles, &b_rec_ntrue_particles);
   fChain->SetBranchAddress("true_particles", &true_particles_, &b_rec_true_particles_);
   fChain->SetBranchAddress("true_particles.plane0VisE", true_particles_plane0VisE, &b_true_particles_plane0VisE);
   fChain->SetBranchAddress("true_particles.plane1VisE", true_particles_plane1VisE, &b_true_particles_plane1VisE);
   fChain->SetBranchAddress("true_particles.plane2VisE", true_particles_plane2VisE, &b_true_particles_plane2VisE);
   fChain->SetBranchAddress("true_particles.genE", true_particles_genE, &b_true_particles_genE);
   fChain->SetBranchAddress("true_particles.startE", true_particles_startE, &b_true_particles_startE);
   fChain->SetBranchAddress("true_particles.endE", true_particles_endE, &b_true_particles_endE);
   fChain->SetBranchAddress("true_particles.genT", true_particles_genT, &b_true_particles_genT);
   fChain->SetBranchAddress("true_particles.startT", true_particles_startT, &b_true_particles_startT);
   fChain->SetBranchAddress("true_particles.endT", true_particles_endT, &b_true_particles_endT);
   fChain->SetBranchAddress("true_particles.length", true_particles_length, &b_true_particles_length);
   fChain->SetBranchAddress("true_particles.plane0nhit", true_particles_plane0nhit, &b_true_particles_plane0nhit);
   fChain->SetBranchAddress("true_particles.plane1nhit", true_particles_plane1nhit, &b_true_particles_plane1nhit);
   fChain->SetBranchAddress("true_particles.plane2nhit", true_particles_plane2nhit, &b_true_particles_plane2nhit);
   fChain->SetBranchAddress("true_particles.genp.x", true_particles_genp_x, &b_true_particles_genp_x);
   fChain->SetBranchAddress("true_particles.genp.y", true_particles_genp_y, &b_true_particles_genp_y);
   fChain->SetBranchAddress("true_particles.genp.z", true_particles_genp_z, &b_true_particles_genp_z);
   fChain->SetBranchAddress("true_particles.startp.x", true_particles_startp_x, &b_true_particles_startp_x);
   fChain->SetBranchAddress("true_particles.startp.y", true_particles_startp_y, &b_true_particles_startp_y);
   fChain->SetBranchAddress("true_particles.startp.z", true_particles_startp_z, &b_true_particles_startp_z);
   fChain->SetBranchAddress("true_particles.endp.x", true_particles_endp_x, &b_true_particles_endp_x);
   fChain->SetBranchAddress("true_particles.endp.y", true_particles_endp_y, &b_true_particles_endp_y);
   fChain->SetBranchAddress("true_particles.endp.z", true_particles_endp_z, &b_true_particles_endp_z);
   fChain->SetBranchAddress("true_particles.gen.x", true_particles_gen_x, &b_true_particles_gen_x);
   fChain->SetBranchAddress("true_particles.gen.y", true_particles_gen_y, &b_true_particles_gen_y);
   fChain->SetBranchAddress("true_particles.gen.z", true_particles_gen_z, &b_true_particles_gen_z);
   fChain->SetBranchAddress("true_particles.start.x", true_particles_start_x, &b_true_particles_start_x);
   fChain->SetBranchAddress("true_particles.start.y", true_particles_start_y, &b_true_particles_start_y);
   fChain->SetBranchAddress("true_particles.start.z", true_particles_start_z, &b_true_particles_start_z);
   fChain->SetBranchAddress("true_particles.end.x", true_particles_end_x, &b_true_particles_end_x);
   fChain->SetBranchAddress("true_particles.end.y", true_particles_end_y, &b_true_particles_end_y);
   fChain->SetBranchAddress("true_particles.end.z", true_particles_end_z, &b_true_particles_end_z);
   fChain->SetBranchAddress("true_particles.wallin", true_particles_wallin, &b_true_particles_wallin);
   fChain->SetBranchAddress("true_particles.wallout", true_particles_wallout, &b_true_particles_wallout);
   fChain->SetBranchAddress("true_particles.cont_tpc", true_particles_cont_tpc, &b_true_particles_cont_tpc);
   fChain->SetBranchAddress("true_particles.crosses_tpc", true_particles_crosses_tpc, &b_true_particles_crosses_tpc);
   fChain->SetBranchAddress("true_particles.contained", true_particles_contained, &b_true_particles_contained);
   fChain->SetBranchAddress("true_particles.pdg", true_particles_pdg, &b_true_particles_pdg);
   fChain->SetBranchAddress("true_particles.G4ID", true_particles_G4ID, &b_true_particles_G4ID);
   fChain->SetBranchAddress("true_particles.interaction_id", true_particles_interaction_id, &b_true_particles_interaction_id);
   fChain->SetBranchAddress("true_particles.daughters", true_particles_daughters, &b_true_particles_daughters);
   fChain->SetBranchAddress("true_particles.parent", true_particles_parent, &b_true_particles_parent);
   fChain->SetBranchAddress("true_particles.generator", true_particles_generator, &b_true_particles_generator);
   fChain->SetBranchAddress("true_particles.start_process", true_particles_start_process, &b_true_particles_start_process);
   fChain->SetBranchAddress("true_particles.end_process", true_particles_end_process, &b_true_particles_end_process);
   fChain->SetBranchAddress("true_particles.gstatus", true_particles_gstatus, &b_true_particles_gstatus);
   fChain->SetBranchAddress("ncrt_hits", &ncrt_hits, &b_rec_ncrt_hits);
   fChain->SetBranchAddress("crt_hits", &crt_hits_, &b_rec_crt_hits_);
   fChain->SetBranchAddress("crt_hits.position.x", &crt_hits_position_x, &b_crt_hits_position_x);
   fChain->SetBranchAddress("crt_hits.position.y", &crt_hits_position_y, &b_crt_hits_position_y);
   fChain->SetBranchAddress("crt_hits.position.z", &crt_hits_position_z, &b_crt_hits_position_z);
   fChain->SetBranchAddress("crt_hits.position_err.x", &crt_hits_position_err_x, &b_crt_hits_position_err_x);
   fChain->SetBranchAddress("crt_hits.position_err.y", &crt_hits_position_err_y, &b_crt_hits_position_err_y);
   fChain->SetBranchAddress("crt_hits.position_err.z", &crt_hits_position_err_z, &b_crt_hits_position_err_z);
   fChain->SetBranchAddress("crt_hits.time", &crt_hits_time, &b_crt_hits_time);
   fChain->SetBranchAddress("crt_hits.pe", &crt_hits_pe, &b_crt_hits_pe);
   fChain->SetBranchAddress("crt_hits.plane", &crt_hits_plane, &b_crt_hits_plane);
   fChain->SetBranchAddress("ncrt_tracks", &ncrt_tracks, &b_rec_ncrt_tracks);
   fChain->SetBranchAddress("crt_tracks", &crt_tracks_, &b_rec_crt_tracks_);
   fChain->SetBranchAddress("crt_tracks.hita.position.x", &crt_tracks_hita_position_x, &b_crt_tracks_hita_position_x);
   fChain->SetBranchAddress("crt_tracks.hita.position.y", &crt_tracks_hita_position_y, &b_crt_tracks_hita_position_y);
   fChain->SetBranchAddress("crt_tracks.hita.position.z", &crt_tracks_hita_position_z, &b_crt_tracks_hita_position_z);
   fChain->SetBranchAddress("crt_tracks.hita.position_err.x", &crt_tracks_hita_position_err_x, &b_crt_tracks_hita_position_err_x);
   fChain->SetBranchAddress("crt_tracks.hita.position_err.y", &crt_tracks_hita_position_err_y, &b_crt_tracks_hita_position_err_y);
   fChain->SetBranchAddress("crt_tracks.hita.position_err.z", &crt_tracks_hita_position_err_z, &b_crt_tracks_hita_position_err_z);
   fChain->SetBranchAddress("crt_tracks.hita.time", &crt_tracks_hita_time, &b_crt_tracks_hita_time);
   fChain->SetBranchAddress("crt_tracks.hita.pe", &crt_tracks_hita_pe, &b_crt_tracks_hita_pe);
   fChain->SetBranchAddress("crt_tracks.hita.plane", &crt_tracks_hita_plane, &b_crt_tracks_hita_plane);
   fChain->SetBranchAddress("crt_tracks.hitb.position.x", &crt_tracks_hitb_position_x, &b_crt_tracks_hitb_position_x);
   fChain->SetBranchAddress("crt_tracks.hitb.position.y", &crt_tracks_hitb_position_y, &b_crt_tracks_hitb_position_y);
   fChain->SetBranchAddress("crt_tracks.hitb.position.z", &crt_tracks_hitb_position_z, &b_crt_tracks_hitb_position_z);
   fChain->SetBranchAddress("crt_tracks.hitb.position_err.x", &crt_tracks_hitb_position_err_x, &b_crt_tracks_hitb_position_err_x);
   fChain->SetBranchAddress("crt_tracks.hitb.position_err.y", &crt_tracks_hitb_position_err_y, &b_crt_tracks_hitb_position_err_y);
   fChain->SetBranchAddress("crt_tracks.hitb.position_err.z", &crt_tracks_hitb_position_err_z, &b_crt_tracks_hitb_position_err_z);
   fChain->SetBranchAddress("crt_tracks.hitb.time", &crt_tracks_hitb_time, &b_crt_tracks_hitb_time);
   fChain->SetBranchAddress("crt_tracks.hitb.pe", &crt_tracks_hitb_pe, &b_crt_tracks_hitb_pe);
   fChain->SetBranchAddress("crt_tracks.hitb.plane", &crt_tracks_hitb_plane, &b_crt_tracks_hitb_plane);
   fChain->SetBranchAddress("crt_tracks.time", &crt_tracks_time, &b_crt_tracks_time);
   fChain->SetBranchAddress("pass_flashtrig", &pass_flashtrig, &b_rec_pass_flashtrig);
   Notify();
}

Bool_t recTree::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void recTree::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t recTree::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef recTree_cxx
